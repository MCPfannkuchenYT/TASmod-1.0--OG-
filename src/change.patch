diff -ruN src/minecraft/de/pfannekuchen/tasmod/TASmod.java newsrc/minecraft/de/pfannekuchen/tasmod/TASmod.java
--- src/minecraft/de/pfannekuchen/tasmod/TASmod.java	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/de/pfannekuchen/tasmod/TASmod.java	2021-04-09 19:04:32.260982100 +0200
@@ -0,0 +1,38 @@
+package de.pfannekuchen.tasmod;
+
+/**
+ * 
+ * All methods that should be accessible from the Minecraft Code
+ * 
+ * @author Pancake
+ */
+public final class TASmod {
+
+	/**
+	 * Join a World and start the Recording
+	 * 
+	 * @param seed Create a world with this seed
+	 * @return Returns whether the action was successful
+	 */
+	public static final boolean startRecording(String seed) {
+		throw new RuntimeException("Not implemented yet! :c");
+	}
+	
+	/**
+	 * Ends the current recording
+	 */
+	public static final void endRecording() {
+		throw new RuntimeException("Not implemented yet! :c");
+	}
+	
+	/**
+	 * Joins the World of the Playback and starts the Playback
+	 * 
+	 * @param seed Create a world with this seed
+	 * @return Returns whether the action was successful
+	 */
+	public static final boolean startPlayback() {
+		throw new RuntimeException("Not implemented yet! :c");
+	}
+	
+}
diff -ruN src/minecraft/net/minecraft/client/Minecraft.java newsrc/minecraft/net/minecraft/client/Minecraft.java
--- src/minecraft/net/minecraft/client/Minecraft.java	2021-04-09 19:04:48.286062500 +0200
+++ newsrc/minecraft/net/minecraft/client/Minecraft.java	2021-04-09 19:04:32.341979300 +0200
@@ -12,6 +12,8 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.io.PrintStream;
 import java.text.DecimalFormat;
 import net.minecraft.src.Achievement;
@@ -108,6 +110,9 @@
 import net.minecraft.src.WorldProvider;
 import net.minecraft.src.WorldRenderer;
 import net.minecraft.src.WorldSettings;
+import net.tasmod.TASmod;
+import net.tasmod.Utils;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -126,7 +131,7 @@
 {
 
     public static byte field_28006_b[] = new byte[0xa00000];
-    private static Minecraft theMinecraft;
+    public static Minecraft theMinecraft;
     public PlayerController playerController;
     private boolean fullscreen;
     private boolean hasCrashed;
@@ -152,7 +157,7 @@
     public EntityRenderer entityRenderer;
     private ThreadDownloadResources downloadResourcesThread;
     private int ticksRan;
-    private int leftClickCounter;
+    public int leftClickCounter;
     private int tempDisplayWidth;
     private int tempDisplayHeight;
     public GuiAchievement guiAchievement;
@@ -171,7 +176,7 @@
     public static long tickTimes[] = new long[512];
     public static int numRecordedFrameTimes = 0;
     public static long hasPaidCheckTime = 0L;
-    private int rightClickDelayTimer;
+    public int rightClickDelayTimer;
     public StatFileWriter statFileWriter;
     private String serverName;
     private int serverPort;
@@ -324,7 +329,7 @@
         }
         catch(Exception exception)
         {
-            exception.printStackTrace();
+            // Remove Ugly Exception
         }
         checkGLError("Pre startup");
         GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
@@ -653,7 +658,7 @@
         }
     }
 
-    private void func_40001_x()
+    private void func_40001_x() throws IOException
     {
         if(mcApplet != null && !mcApplet.isActive())
         {
@@ -756,6 +761,11 @@
         {
             Display.update();
         }
+        // Pancake: React to hotkeys
+        if(Keyboard.isKeyDown(gameSettings.keyBindStartRecording.keyCode) && theWorld == null) TASmod.startRecording(-5793894949254896867L, 0);
+        if(Keyboard.isKeyDown(gameSettings.keyBindStopRecording.keyCode) && theWorld != null) TASmod.endRecording();
+        if(Keyboard.isKeyDown(gameSettings.keyBindPlayback.keyCode) && theWorld == null) TASmod.startPlayback();
+        
         screenshotListener();
         if(mcCanvas != null && !fullscreen && (mcCanvas.getWidth() != displayWidth || mcCanvas.getHeight() != displayHeight))
         {
@@ -1243,7 +1253,7 @@
         (new ThreadCheckHasPaid(this)).start();
     }
 
-    public void runTick()
+    public void runTick() throws IOException
     {
         if(rightClickDelayTimer > 0)
         {
@@ -1313,6 +1323,34 @@
                 currentScreen.updateScreen();
             }
         }
+        
+        // Moved from EntityRenderer.java / basically just hooked up.
+        if(inGameHasFocus)
+        {
+        	
+            float f1 = gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float f2 = f1 * f1 * f1 * 8F;
+        	
+            float f3 = (float) Utils.dX * f2;
+            float f4 = (float) Utils.dY * f2;
+            
+            Utils.dX = 0;
+            Utils.dY = 0;
+            
+            int l = 1;
+            
+            if (gameSettings.invertMouse) {
+                l = -1;
+            }
+            thePlayer.setAngles(f3, f4 * (float)l);
+            
+            Utils.prevRotationPitch = thePlayer.prevRotationPitch;
+            Utils.prevRotationYaw = thePlayer.prevRotationYaw;
+            Utils.rotationPitch = thePlayer.rotationPitch;
+            Utils.rotationYaw = thePlayer.rotationYaw;
+        }
+        
+        if (theWorld != null && TASmod.isPlayback()) TASmod.tick();
         if(currentScreen == null || currentScreen.allowUserInput)
         {
             Profiler.endStartSection("mouse");
@@ -1322,10 +1360,10 @@
                 {
                     break;
                 }
-                KeyBinding.setKeyBindState(Mouse.getEventButton() - 100, Mouse.getEventButtonState());
+                if (!TASmod.isPlayback()) KeyBinding.setKeyBindState(Mouse.getEventButton() - 100, Mouse.getEventButtonState());
                 if(Mouse.getEventButtonState())
                 {
-                    KeyBinding.onTick(Mouse.getEventButton() - 100);
+                	if (!TASmod.isPlayback()) KeyBinding.onTick(Mouse.getEventButton() - 100);
                 }
                 long l = System.currentTimeMillis() - systemTime;
                 if(l <= 200L)
@@ -1371,95 +1409,28 @@
                 {
                     break;
                 }
-                KeyBinding.setKeyBindState(Keyboard.getEventKey(), Keyboard.getEventKeyState());
+                if (!TASmod.isPlayback()) KeyBinding.setKeyBindState(Keyboard.getEventKey(), Keyboard.getEventKeyState());
                 if(Keyboard.getEventKeyState())
                 {
-                    KeyBinding.onTick(Keyboard.getEventKey());
+                	if (!TASmod.isPlayback()) KeyBinding.onTick(Keyboard.getEventKey());
                 }
-                if(Keyboard.getEventKeyState())
-                {
-                    if(Keyboard.getEventKey() == 87)
+                if(Keyboard.getEventKeyState()) { // Yeet a lot of hotkeys, that don't need to be implemented, because they will be included using different methods, or are just useless!
+                    for(int i = 0; i < 9; i++)
                     {
-                        toggleFullscreen();
-                    } else
-                    {
-                        if(currentScreen != null)
-                        {
-                            currentScreen.handleKeyboardInput();
-                        } else
+                        if(Keyboard.getEventKey() == 2 + i)
                         {
-                            if(Keyboard.getEventKey() == 1)
-                            {
-                                displayInGameMenu();
-                            }
-                            if(Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61))
-                            {
-                                forceReload();
-                            }
-                            if(Keyboard.getEventKey() == 20 && Keyboard.isKeyDown(61))
-                            {
-                                renderEngine.refreshTextures();
-                            }
-                            if(Keyboard.getEventKey() == 33 && Keyboard.isKeyDown(61))
-                            {
-                                boolean flag = Keyboard.isKeyDown(42) | Keyboard.isKeyDown(54);
-                                gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, flag ? -1 : 1);
-                            }
-                            if(Keyboard.getEventKey() == 30 && Keyboard.isKeyDown(61))
-                            {
-                                renderGlobal.loadRenderers();
-                            }
-                            if(Keyboard.getEventKey() == 59)
-                            {
-                                gameSettings.hideGUI = !gameSettings.hideGUI;
-                            }
-                            if(Keyboard.getEventKey() == 61)
-                            {
-                                gameSettings.showDebugInfo = !gameSettings.showDebugInfo;
-                            }
-                            if(Keyboard.getEventKey() == 63)
-                            {
-                                gameSettings.thirdPersonView++;
-                                if(gameSettings.thirdPersonView > 2)
-                                {
-                                    gameSettings.thirdPersonView = 0;
-                                }
-                            }
-                            if(Keyboard.getEventKey() == 66)
-                            {
-                                gameSettings.smoothCamera = !gameSettings.smoothCamera;
-                            }
-                        }
-                        for(int i = 0; i < 9; i++)
-                        {
-                            if(Keyboard.getEventKey() == 2 + i)
-                            {
-                                thePlayer.inventory.currentItem = i;
-                            }
-                        }
-
-                        if(gameSettings.showDebugInfo)
-                        {
-                            if(Keyboard.getEventKey() == 11)
-                            {
-                                func_40003_b(0);
-                            }
-                            int j = 0;
-                            while(j < 9) 
-                            {
-                                if(Keyboard.getEventKey() == 2 + j)
-                                {
-                                    func_40003_b(j + 1);
-                                }
-                                j++;
-                            }
+                            thePlayer.inventory.currentItem = i;
                         }
                     }
                 }
             } while(true);
+            
+            if (theWorld != null && TASmod.isRecording()) TASmod.tick();
+            
             for(; gameSettings.keyBindInventory.isPressed(); displayGuiScreen(new GuiInventory(thePlayer))) { }
             for(; gameSettings.keyBindDrop.isPressed(); thePlayer.dropCurrentItem()) { }
             for(; isMultiplayerWorld() && gameSettings.keyBindChat.isPressed(); displayGuiScreen(new GuiChat())) { }
+            
             if(thePlayer.isUsingItem())
             {
                 if(!gameSettings.keyBindUseItem.pressed)
diff -ruN src/minecraft/net/minecraft/src/ChunkProviderClient.java newsrc/minecraft/net/minecraft/src/ChunkProviderClient.java
--- src/minecraft/net/minecraft/src/ChunkProviderClient.java	2021-04-09 19:04:50.554064300 +0200
+++ newsrc/minecraft/net/minecraft/src/ChunkProviderClient.java	2021-04-09 19:04:34.604973400 +0200
@@ -30,13 +30,7 @@
 
     public boolean chunkExists(int i, int j)
     {
-        if(this != null)
-        {
-            return true;
-        } else
-        {
-            return chunkMapping.func_35575_b(ChunkCoordIntPair.chunkXZ2Int(i, j));
-        }
+        return true;
     }
 
     public void func_539_c(int i, int j)
diff -ruN src/minecraft/net/minecraft/src/EntityRenderer.java newsrc/minecraft/net/minecraft/src/EntityRenderer.java
--- src/minecraft/net/minecraft/src/EntityRenderer.java	2021-04-09 19:04:53.380712400 +0200
+++ newsrc/minecraft/net/minecraft/src/EntityRenderer.java	2021-04-09 19:04:37.490019700 +0200
@@ -7,14 +7,16 @@
 import java.awt.image.BufferedImage;
 import java.nio.FloatBuffer;
 import java.util.Random;
-import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ContextCapabilities;
 import org.lwjgl.opengl.Display;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.GLU;
 
+import net.minecraft.client.Minecraft;
+import net.tasmod.Utils;
+
 // Referenced classes of package net.minecraft.src:
 //            MouseFilter, GLAllocation, ItemRenderer, RenderEngine, 
 //            GameSettings, EntityLiving, MathHelper, World, 
@@ -396,8 +398,9 @@
         }
         if(!mc.gameSettings.debugCamEnable)
         {
-            GL11.glRotatef(entityliving.prevRotationPitch + (entityliving.rotationPitch - entityliving.prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(entityliving.prevRotationYaw + (entityliving.rotationYaw - entityliving.prevRotationYaw) * f + 180F, 0.0F, 1.0F, 0.0F);
+        	// Rotates..
+            GL11.glRotatef(Utils.prevRotationPitch + (Utils.rotationPitch - Utils.prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(Utils.prevRotationYaw + (Utils.rotationYaw - Utils.prevRotationYaw) * f + 180F, 0.0F, 1.0F, 0.0F);
         }
         GL11.glTranslatef(0.0F, f1, 0.0F);
         d = entityliving.prevPosX + (entityliving.posX - entityliving.prevPosX) * (double)f;
@@ -690,31 +693,25 @@
             prevFrameTime = System.currentTimeMillis();
         }
         Profiler.startSection("mouse");
+        
+        // Interpolation!
         if(mc.inGameHasFocus)
         {
-            mc.mouseHelper.mouseXYChange();
+        	
             float f1 = mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
             float f2 = f1 * f1 * f1 * 8F;
+        	
+            mc.mouseHelper.mouseXYChange();
+            Utils.dX += mc.mouseHelper.deltaX;
+            Utils.dY += mc.mouseHelper.deltaY;
+            
             float f3 = (float)mc.mouseHelper.deltaX * f2;
             float f4 = (float)mc.mouseHelper.deltaY * f2;
             int l = 1;
-            if(mc.gameSettings.invertMouse)
-            {
+            if(mc.gameSettings.invertMouse) {
                 l = -1;
             }
-            if(mc.gameSettings.smoothCamera)
-            {
-                smoothCamYaw += f3;
-                smoothCamPitch += f4;
-                float f5 = f - smoothCamPartialTicks;
-                smoothCamPartialTicks = f;
-                f3 = smoothCamFilterX * f5;
-                f4 = smoothCamFilterY * f5;
-                mc.thePlayer.setAngles(f3, f4 * (float)l);
-            } else
-            {
-                mc.thePlayer.setAngles(f3, f4 * (float)l);
-            }
+            Utils.setAngles(f3, f4 * (float)l);
         }
         Profiler.endSection();
         if(mc.skipRenderWorld)
diff -ruN src/minecraft/net/minecraft/src/GameSettings.java newsrc/minecraft/net/minecraft/src/GameSettings.java
--- src/minecraft/net/minecraft/src/GameSettings.java	2021-04-09 19:04:54.254752600 +0200
+++ newsrc/minecraft/net/minecraft/src/GameSettings.java	2021-04-09 19:04:38.307003400 +0200
@@ -56,6 +56,10 @@
     public KeyBinding keyBindUseItem;
     public KeyBinding keyBindPlayerList;
     public KeyBinding keyBindPickBlock;
+    /* 1: Add a Start and Stop Recording Hotkey */
+    public KeyBinding keyBindStartRecording;
+    public KeyBinding keyBindStopRecording;
+    public KeyBinding keyBindPlayback;
     public KeyBinding keyBindings[];
     protected Minecraft mc;
     private File optionsFile;
@@ -102,9 +106,13 @@
         keyBindUseItem = new KeyBinding("key.use", -99);
         keyBindPlayerList = new KeyBinding("key.playerlist", 15);
         keyBindPickBlock = new KeyBinding("key.pickItem", -98);
+        // 2: Add a Start and Stop Recording Hotkey
+        keyBindStartRecording = new KeyBinding("Start Recording", Keyboard.KEY_J);
+        keyBindStopRecording = new KeyBinding("Stop Recording", Keyboard.KEY_K);
+        keyBindPlayback = new KeyBinding("Playback", Keyboard.KEY_P);
         keyBindings = (new KeyBinding[] {
             keyBindAttack, keyBindUseItem, keyBindForward, keyBindLeft, keyBindBack, keyBindRight, keyBindJump, keyBindSneak, keyBindDrop, keyBindInventory, 
-            keyBindChat, keyBindPlayerList, keyBindPickBlock
+            keyBindChat, keyBindPlayerList, keyBindPickBlock, keyBindStartRecording, keyBindStopRecording, keyBindPlayback
         });
         difficulty = 2;
         hideGUI = false;
diff -ruN src/minecraft/net/minecraft/src/GuiContainer.java newsrc/minecraft/net/minecraft/src/GuiContainer.java
--- src/minecraft/net/minecraft/src/GuiContainer.java	2021-04-09 19:04:54.726753400 +0200
+++ newsrc/minecraft/net/minecraft/src/GuiContainer.java	2021-04-09 19:04:38.766005700 +0200
@@ -190,30 +190,6 @@
         }
         itemRenderer.field_40268_b = 0.0F;
         zLevel = 0.0F;
-        if(this == null)
-        {
-            zLevel = 100F;
-            itemRenderer.field_40268_b = 100F;
-            if(itemstack == null)
-            {
-                int l = slot.getBackgroundIconIndex();
-                if(l >= 0)
-                {
-                    GL11.glDisable(2896 /*GL_LIGHTING*/);
-                    mc.renderEngine.bindTexture(mc.renderEngine.getTexture("/gui/items.png"));
-                    drawTexturedModalRect(i, j, (l % 16) * 16, (l / 16) * 16, 16, 16);
-                    GL11.glEnable(2896 /*GL_LIGHTING*/);
-                    flag = true;
-                }
-            }
-            if(!flag)
-            {
-                itemRenderer.renderItemIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
-                itemRenderer.renderItemOverlayIntoGUI(fontRenderer, mc.renderEngine, itemstack, i, j);
-            }
-            itemRenderer.field_40268_b = 0.0F;
-            zLevel = 0.0F;
-        }
     }
 
     private Slot getSlotAtPosition(int i, int j)
diff -ruN src/minecraft/net/minecraft/src/GuiControls.java newsrc/minecraft/net/minecraft/src/GuiControls.java
--- src/minecraft/net/minecraft/src/GuiControls.java	2021-04-09 19:04:54.761767400 +0200
+++ newsrc/minecraft/net/minecraft/src/GuiControls.java	2021-04-09 19:04:38.801018100 +0200
@@ -41,7 +41,7 @@
             controlList.add(new GuiSmallButton(j, i + (j % 2) * 160, height / 6 + 24 * (j >> 1), 70, 20, options.getOptionDisplayString(j)));
         }
 
-        controlList.add(new GuiButton(200, width / 2 - 100, height / 6 + 168, stringtranslate.translateKey("gui.done")));
+        controlList.add(new GuiButton(200, width / 2 - 100, height - 28, stringtranslate.translateKey("gui.done")));
         screenTitle = stringtranslate.translateKey("controls.title");
     }
 
diff -ruN src/minecraft/net/minecraft/src/GuiIngameMenu.java newsrc/minecraft/net/minecraft/src/GuiIngameMenu.java
--- src/minecraft/net/minecraft/src/GuiIngameMenu.java	2021-04-09 19:04:54.967752700 +0200
+++ newsrc/minecraft/net/minecraft/src/GuiIngameMenu.java	2021-04-09 19:04:39.025008200 +0200
@@ -4,8 +4,10 @@
 
 package net.minecraft.src;
 
+import java.io.IOException;
 import java.util.List;
 import net.minecraft.client.Minecraft;
+import net.tasmod.TASmod;
 
 // Referenced classes of package net.minecraft.src:
 //            GuiScreen, GuiButton, StatCollector, GuiOptions, 
@@ -48,6 +50,12 @@
         }
         if(guibutton.id == 1)
         {
+        	if (TASmod.isRecording())
+				try {
+					TASmod.endRecording();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
             mc.statFileWriter.readStat(StatList.leaveGameStat, 1);
             if(mc.isMultiplayerWorld())
             {
diff -ruN src/minecraft/net/minecraft/src/GuiOptions.java newsrc/minecraft/net/minecraft/src/GuiOptions.java
--- src/minecraft/net/minecraft/src/GuiOptions.java	2021-04-09 19:04:55.046767500 +0200
+++ newsrc/minecraft/net/minecraft/src/GuiOptions.java	2021-04-09 19:04:39.110015100 +0200
@@ -6,6 +6,7 @@
 
 import java.util.List;
 import net.minecraft.client.Minecraft;
+import net.tasmod.TASmod;
 
 // Referenced classes of package net.minecraft.src:
 //            GuiScreen, StringTranslate, EnumOptions, GuiSmallButton, 
@@ -45,16 +46,19 @@
                     guismallbutton.enabled = false;
                     guismallbutton.displayString = (new StringBuilder()).append(StatCollector.translateToLocal("options.difficulty")).append(": ").append(StatCollector.translateToLocal("options.difficulty.hardcore")).toString();
                 }
+                guismallbutton.enabled = !TASmod.isRecording();
                 controlList.add(guismallbutton);
             } else
             {
                 controlList.add(new GuiSlider(enumoptions.returnEnumOrdinal(), (width / 2 - 155) + (i % 2) * 160, height / 6 + 24 * (i >> 1), enumoptions, options.getKeyBinding(enumoptions), options.getOptionFloatValue(enumoptions)));
+                if (TASmod.isRecording() && (enumoptions == EnumOptions.SENSITIVITY || enumoptions == EnumOptions.INVERT_MOUSE)) ((GuiSlider) controlList.get(controlList.size() - 1)).enabled = false;
             }
             i++;
         }
 
         controlList.add(new GuiButton(101, width / 2 - 100, height / 6 + 96 + 12, stringtranslate.translateKey("options.video")));
         controlList.add(new GuiButton(100, width / 2 - 100, height / 6 + 120 + 12, stringtranslate.translateKey("options.controls")));
+        ((GuiButton) controlList.get(controlList.size() - 1)).enabled = !TASmod.isRecording();
         controlList.add(new GuiButton(200, width / 2 - 100, height / 6 + 168, stringtranslate.translateKey("gui.done")));
     }
 
diff -ruN src/minecraft/net/minecraft/src/GuiScreen.java newsrc/minecraft/net/minecraft/src/GuiScreen.java
--- src/minecraft/net/minecraft/src/GuiScreen.java	2021-04-09 19:04:55.105752500 +0200
+++ newsrc/minecraft/net/minecraft/src/GuiScreen.java	2021-04-09 19:04:39.180008200 +0200
@@ -46,11 +46,7 @@
 
     protected void keyTyped(char c, int i)
     {
-        if(i == 1)
-        {
-            mc.displayGuiScreen(null);
-            mc.setIngameFocus();
-        }
+        // No more closing GUI using Escape!
     }
 
     public static String getClipboardString()
@@ -139,11 +135,7 @@
     {
         if(Keyboard.getEventKeyState())
         {
-            if(Keyboard.getEventKey() == 87)
-            {
-                mc.toggleFullscreen();
-                return;
-            }
+           // Yeet
             keyTyped(Keyboard.getEventCharacter(), Keyboard.getEventKey());
         }
     }
diff -ruN src/minecraft/net/minecraft/src/MouseHelper.java newsrc/minecraft/net/minecraft/src/MouseHelper.java
--- src/minecraft/net/minecraft/src/MouseHelper.java	2021-04-09 19:04:58.426752200 +0200
+++ newsrc/minecraft/net/minecraft/src/MouseHelper.java	2021-04-09 19:04:42.481017000 +0200
@@ -52,9 +52,8 @@
         Mouse.setCursorPosition(windowComponent.getWidth() / 2, windowComponent.getHeight() / 2);
         Mouse.setGrabbed(false);
     }
-
-    public void mouseXYChange()
-    {
+    
+    public void mouseXYChange() {
         deltaX = Mouse.getDX();
         deltaY = Mouse.getDY();
     }
diff -ruN src/minecraft/net/minecraft/src/RenderBlocks.java newsrc/minecraft/net/minecraft/src/RenderBlocks.java
--- src/minecraft/net/minecraft/src/RenderBlocks.java	2021-04-09 19:05:00.668754500 +0200
+++ newsrc/minecraft/net/minecraft/src/RenderBlocks.java	2021-04-09 19:04:44.762009700 +0200
@@ -181,40 +181,7 @@
 
     public boolean renderLightOnBlock(int i, int j, int k, int l)
     {
-        if(this != null)
-        {
-            return false;
-        }
-        byte byte0 = 13;
-        byte byte1 = 52;
-        byte byte2 = 32;
-        int i1 = MathHelper.abs_int(i - byte0);
-        int j1 = MathHelper.abs_int(k - byte1);
-        if(j1 <= byte2 && i1 <= byte2 && (i1 == byte2 || j1 == byte2) && catchesLight[blockAccess.getBlockId(i, j, k)])
-        {
-            int k1 = 5;
-            if(i == byte0 - byte2)
-            {
-                k1--;
-            }
-            if(i == byte0 + byte2)
-            {
-                k1++;
-            }
-            if(k == byte1 - byte2)
-            {
-                k1 -= 3;
-            }
-            if(k == byte1 + byte2)
-            {
-                k1 += 3;
-            }
-            renderCorrectedLightOnBlock(k1, i, j, k);
-            return true;
-        } else
-        {
-            return false;
-        }
+        return false;
     }
 
     public boolean renderBlockByRenderType(Block block, int i, int j, int k)
diff -ruN src/minecraft/net/minecraft/src/ThreadCheckHasPaid.java newsrc/minecraft/net/minecraft/src/ThreadCheckHasPaid.java
--- src/minecraft/net/minecraft/src/ThreadCheckHasPaid.java	2021-04-09 19:05:02.718754800 +0200
+++ newsrc/minecraft/net/minecraft/src/ThreadCheckHasPaid.java	2021-04-09 19:04:46.832003500 +0200
@@ -28,10 +28,6 @@
         {
             HttpURLConnection httpurlconnection = (HttpURLConnection)(new URL((new StringBuilder()).append("https://login.minecraft.net/session?name=").append(mc.session.username).append("&session=").append(mc.session.sessionId).toString())).openConnection();
             httpurlconnection.connect();
-            if(httpurlconnection.getResponseCode() == 400 && this == null)
-            {
-                Minecraft.hasPaidCheckTime = System.currentTimeMillis();
-            }
             httpurlconnection.disconnect();
         }
         catch(Exception exception)
diff -ruN src/minecraft/net/minecraft/src/ThreadDownloadResources.java newsrc/minecraft/net/minecraft/src/ThreadDownloadResources.java
--- src/minecraft/net/minecraft/src/ThreadDownloadResources.java	2021-04-09 19:05:02.792752300 +0200
+++ newsrc/minecraft/net/minecraft/src/ThreadDownloadResources.java	2021-04-09 19:04:46.907062300 +0200
@@ -42,6 +42,9 @@
             DocumentBuilderFactory documentbuilderfactory = DocumentBuilderFactory.newInstance();
             DocumentBuilder documentbuilder = documentbuilderfactory.newDocumentBuilder();
             Document document = documentbuilder.parse(url.openStream());
+            
+            // Pancake: Change sounds download location to self hosted one, because old one is not available
+            url = new URL("http://mgnet.work/archive/1.0-sounds/");
             NodeList nodelist = document.getElementsByTagName("Contents");
             for(int i = 0; i < 2; i++)
             {
@@ -150,7 +153,7 @@
             dataoutputstream.write(abyte0, 0, i);
             if(closing)
             {
-                return;
+                break;
             }
         }
 
diff -ruN src/minecraft/net/minecraft/src/TileEntityMobSpawner.java newsrc/minecraft/net/minecraft/src/TileEntityMobSpawner.java
--- src/minecraft/net/minecraft/src/TileEntityMobSpawner.java	2021-04-09 19:05:03.046751600 +0200
+++ newsrc/minecraft/net/minecraft/src/TileEntityMobSpawner.java	2021-04-09 19:04:47.158065200 +0200
@@ -85,10 +85,6 @@
                     updateDelay();
                     return;
                 }
-                if(entityliving == null)
-                {
-                    continue;
-                }
                 double d3 = (double)xCoord + (worldObj.rand.nextDouble() - worldObj.rand.nextDouble()) * 4D;
                 double d4 = (yCoord + worldObj.rand.nextInt(3)) - 1;
                 double d5 = (double)zCoord + (worldObj.rand.nextDouble() - worldObj.rand.nextDouble()) * 4D;
diff -ruN src/minecraft/net/tasmod/recorder/Recorder.java newsrc/minecraft/net/tasmod/recorder/Recorder.java
--- src/minecraft/net/tasmod/recorder/Recorder.java	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/net/tasmod/recorder/Recorder.java	2021-04-09 19:04:48.144077400 +0200
@@ -0,0 +1,128 @@
+package net.tasmod.recorder;
+
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.util.LinkedList;
+import java.util.Queue;
+
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.GameSettings;
+import net.minecraft.src.KeyBinding;
+import net.minecraft.src.MathHelper;
+import net.minecraft.src.PlayerControllerCreative;
+import net.minecraft.src.PlayerControllerSP;
+import net.minecraft.src.WorldSettings;
+import net.tasmod.Utils;
+
+/**
+ * Records a Speedrun, and saves it into a File.
+ * @author Pancake
+ */
+public final class Recorder {
+	
+	private final long worldseed;
+	private final int worldtype;
+	private final Minecraft mc;
+	private final File file;
+	private final FileOutputStream writer;
+	private final Queue<String> linesToPrint = new LinkedList<>();
+	
+	private int currentTick;
+	private final Thread fileWriter;
+	
+	/**
+	 * Creates a new File and prints the Header into it
+	 * @param worldseed World Seed of the TAS.
+	 * @param worldtype Gamemode of the TAS
+	 * @throws IOException Cannot be thrown, unless something is terribly wrong.
+	 */
+	public Recorder(long worldseed, int worldtype) throws IOException {
+		this.worldseed = worldseed;
+		this.mc = Minecraft.theMinecraft;
+		this.worldtype = worldtype;
+		this.file = new File(this.mc.mcDataDir, "recording.tas");
+		
+		/** Create a new File for the Recorder */
+		if (!this.file.exists()) this.file.createNewFile();
+		this.writer = new FileOutputStream(this.file, false);
+		
+		fileWriter = new Thread(new Runnable() {
+			
+			/**
+			 * Thread that will take stuff from a queue and write to the File
+			 */
+			@Override
+			public void run() {
+				try {
+					/* Print the Header of the TAS into the File */
+					writer.write(("###############################################\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("#                 THIS IS A TAS               #\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("#    Seed: " + String.format("%020d", worldseed) + "               #\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("#                                             #\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("#    Gametype: " + worldtype +  "                              #\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("#                 PLAYBACK FILE               #\n").getBytes(StandardCharsets.UTF_8));
+					writer.write(("###############################################\n").getBytes(StandardCharsets.UTF_8));
+					while (!Thread.currentThread().isInterrupted()) {
+						if (!linesToPrint.isEmpty()) writer.write(linesToPrint.poll().getBytes(StandardCharsets.UTF_8));
+						else
+							try {
+								Thread.sleep(50);
+							} catch (InterruptedException e) {
+								break;
+							}
+					}
+					writer.write("###############################################".getBytes(StandardCharsets.UTF_8));
+					writer.close();
+				} catch (IOException e) {
+					e.printStackTrace();
+				}
+			}
+		});
+		fileWriter.start();
+	}
+	
+	/**
+	 * Create a new World, and join it.
+	 */
+	public final void startRecording() {
+		/* Delete World if it exists */
+		final File worldFile = new File(this.mc.mcDataDir, "saves" + File.separator + "TAS-Playback");
+		if (worldFile.exists()) Utils.deleteDirectory(worldFile);
+		
+		/* Join a new world */
+		this.mc.playerController = this.worldtype == 0 ? new PlayerControllerSP(this.mc) : new PlayerControllerCreative(this.mc);
+		this.mc.startWorld("TAS-Playback", "TAS-Playback", new WorldSettings(this.worldseed, this.worldtype, true, false));
+		this.mc.displayGuiScreen(null);
+	}
+	
+	/**
+	 * Write all Keybindings into the File
+	 */
+	public final void tick() {
+		String print = this.currentTick + ":";
+		for (int i = 0; i < this.mc.gameSettings.keyBindings.length; i++) {
+			print += i + "\u002D" + (this.mc.gameSettings.keyBindings[i].pressed ? "1" : "0") + "\u002D" + this.mc.gameSettings.keyBindings[i].pressTime + "\u007C";
+		}
+		print += ":" + Mouse.getX() + ";" + Mouse.getY() + ":" + mc.thePlayer.rotationYaw + ";" + (mc.thePlayer.rotationPitch % 360.0f) + ";" + (mc.leftClickCounter >= 0 ? (mc.leftClickCounter + 1) : mc.leftClickCounter ) + ";" + mc.rightClickDelayTimer + ";" + mc.thePlayer.inventory.currentItem;
+		
+		linesToPrint.add(print + '\n');
+		this.currentTick++;
+	}
+	
+	/**
+	 * End the Recording by writing '#' to the File
+	 */
+	public final void endRecording() {
+		fileWriter.interrupt();
+	}
+	
+}
diff -ruN src/minecraft/net/tasmod/replayer/Replayer.java newsrc/minecraft/net/tasmod/replayer/Replayer.java
--- src/minecraft/net/tasmod/replayer/Replayer.java	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/net/tasmod/replayer/Replayer.java	2021-04-09 19:04:48.166062500 +0200
@@ -0,0 +1,128 @@
+package net.tasmod.replayer;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.DataInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
+import java.util.LinkedList;
+import java.util.Queue;
+
+import org.lwjgl.input.Mouse;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.src.KeyBinding;
+import net.minecraft.src.PlayerControllerCreative;
+import net.minecraft.src.PlayerControllerSP;
+import net.minecraft.src.WorldSettings;
+import net.tasmod.TASmod;
+import net.tasmod.Utils;
+
+/**
+ * Records a Speedrun, and saves it into a File.
+ * @author Pancake
+ */
+public final class Replayer {
+	
+	private final long worldseed;
+	private final int worldtype;
+	private final Minecraft mc;
+	private final File file;
+	private final BufferedReader reader;
+	private final Queue<String> linesRead = new LinkedList<>();
+	
+	private final Thread fileReader;
+	
+	/** Mouse for next tick */
+	private String mouse;
+	
+	/**
+	 * Loads a File and reads some ticks from it
+	 * @throws IOException Cannot be thrown, unless something is terribly wrong.
+	 */
+	public Replayer() throws IOException {
+		this.mc = Minecraft.theMinecraft;
+		this.file = new File(this.mc.mcDataDir, "recording.tas");
+		
+		this.reader = new BufferedReader(new InputStreamReader(new FileInputStream(this.file)));
+		
+		this.reader.readLine();
+		this.reader.readLine();
+		this.worldseed = Long.parseLong(this.reader.readLine().split(": ")[1].split(" ")[0]);
+		this.reader.readLine();
+		this.worldtype = Integer.parseInt(this.reader.readLine().split(": ")[1].split(" ")[0]);
+		this.reader.readLine();
+		this.reader.readLine();
+		
+		this.fileReader = new Thread(new Runnable() {
+			
+			/**
+			 * Thread that will read the file and store it in the Queue
+			 */
+			@Override
+			public void run() {
+				try {
+					while (true) {
+						// Only read up to 20 ticks
+						if (linesRead.size() < 20) {
+							final String line = reader.readLine();
+							if (line == null || line.startsWith("#")) break;
+							linesRead.add(line);
+						} else {
+							Thread.sleep(32);
+						}
+					}
+					reader.close();
+					System.out.println("Read Finished.");
+				} catch (IOException | InterruptedException e) {
+					e.printStackTrace();
+				}
+			}
+		});
+		fileReader.start();
+	}
+	
+	/**
+	 * Create a new World, and join it.
+	 */
+	public final void startReplay() {
+		/* Delete World if it exists */
+		final File worldFile = new File(this.mc.mcDataDir, "saves" + File.separator + "TAS-Playback");
+		if (worldFile.exists()) Utils.deleteDirectory(worldFile);
+		
+		/* Join a new world */
+		this.mc.playerController = this.worldtype == 0 ? new PlayerControllerSP(this.mc) : new PlayerControllerCreative(this.mc);
+		this.mc.startWorld("TAS-Playback", "TAS-Playback", new WorldSettings(this.worldseed, this.worldtype, true, false));
+		this.mc.displayGuiScreen(null);
+	}
+	
+	/**
+	 * Replay Read Ticks
+	 */
+	public final void tick() {
+		final String line = linesRead.poll();
+		if (line != null) {
+			final String hotkeys = line.split(":")[1];
+			for (final String hotkey : hotkeys.split("\\|")) {
+				final String[] hotkey_array = hotkey.split("-");
+				mc.gameSettings.keyBindings[Integer.parseInt(hotkey_array[0])].pressed = hotkey_array[1].equals("0") ? false : true;
+				mc.gameSettings.keyBindings[Integer.parseInt(hotkey_array[0])].pressTime = Integer.parseInt(hotkey_array[2]);
+			}
+			final String position = line.split(":")[2];
+			Mouse.setCursorPosition(Integer.parseInt(position.split(";")[0]), Integer.parseInt(position.split(";")[1]));
+			final String mouse = line.split(":")[3];
+			mc.thePlayer.rotationYaw = Float.parseFloat(mouse.split(";")[0]);
+			mc.thePlayer.rotationPitch = Float.parseFloat(mouse.split(";")[1]);
+			mc.leftClickCounter = Integer.parseInt(mouse.split(";")[2]);
+			mc.rightClickDelayTimer = Integer.parseInt(mouse.split(";")[3]); 
+			mc.thePlayer.inventory.currentItem = Integer.parseInt(mouse.split(";")[4]);
+			
+		} else {
+			TASmod.endPlayback();
+		}
+	}
+	
+}
diff -ruN src/minecraft/net/tasmod/TASmod.java newsrc/minecraft/net/tasmod/TASmod.java
--- src/minecraft/net/tasmod/TASmod.java	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/net/tasmod/TASmod.java	2021-04-09 19:04:48.183077200 +0200
@@ -0,0 +1,91 @@
+package net.tasmod;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import net.tasmod.recorder.Recorder;
+import net.tasmod.replayer.Replayer;
+
+/**
+ * 
+ * All methods that should be accessible from the Minecraft Code
+ * 
+ * @author Pancake
+ */
+public final class TASmod {
+
+	/** Currently running Recording */
+	private static volatile Recorder recording;
+	
+	/** Currently running Playback */
+	private static volatile Replayer playback;
+	
+	/**
+	 * Join a World and start the Recording
+	 * 
+	 * @param seed Create a world with this seed
+	 * @return Returns whether the action was successful
+	 * @throws IOException This Exception cannot be thrown, unless something is terribly wrong.
+	 */
+	public static final boolean startRecording(long worldseed, int worldtype) throws IOException {
+		if (recording != null) return false;
+		recording = new Recorder(worldseed, worldtype);
+		recording.startRecording();
+		return true;
+	}
+	
+	/**
+	 * Ticks all kinds of things
+	 * @throws IOException Unexpected File End
+	 */
+	public static final void tick() throws IOException {
+		if (recording != null) recording.tick();
+		if (playback != null) playback.tick();
+	}
+	
+	/**
+	 * Ends the current recording
+	 */
+	public static final boolean endRecording() throws IOException {
+		if (recording == null) return false;
+		recording.endRecording();
+		recording = null;
+		return true;
+	}
+	
+	/**
+	 * @return Returns whether a Playback is running	
+	 */
+	public static boolean isPlayback() {
+		return playback != null;
+	}
+	
+	/**
+	 * @return Returns whether a Recording is running	
+	 */
+	public static boolean isRecording() {
+		return recording != null;
+	}
+	
+	/**
+	 * Joins the World of the Playback and starts the Playback
+	 * 
+	 * @param seed Create a world with this seed
+	 * @return Returns whether the action was successful
+	 * @throws IOException Thrown if the File doesn't exists
+	 */
+	public static final boolean startPlayback() throws IOException {
+		if (playback != null) return false;
+		playback = new Replayer();
+		playback.startReplay();
+		return true;
+	}
+
+	/**
+	 * End the current Playback
+	 */
+	public static void endPlayback() {
+		playback = null;
+	}
+	
+}
diff -ruN src/minecraft/net/tasmod/Utils.java newsrc/minecraft/net/tasmod/Utils.java
--- src/minecraft/net/tasmod/Utils.java	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/net/tasmod/Utils.java	2021-04-09 19:04:48.199065500 +0200
@@ -0,0 +1,50 @@
+package net.tasmod;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.PrintWriter;
+
+public final class Utils {
+
+	public static float rotationPitch = 0f;
+	public static float rotationYaw = 0f;
+	public static float prevRotationPitch = 0f;
+	public static float prevRotationYaw = 0f;
+	
+	public static double dX = 0;
+	public static double dY = 0;
+	
+    public static void setAngles(float f, float f1) {
+        float f2 = rotationPitch;
+        float f3 = rotationYaw;
+        rotationYaw += (double)f * 0.14999999999999999D;
+        rotationPitch -= (double)f1 * 0.14999999999999999D;
+        if(rotationPitch < -90F)
+        {
+            rotationPitch = -90F;
+        }
+        if(rotationPitch > 90F)
+        {
+            rotationPitch = 90F;
+        }
+        prevRotationPitch += rotationPitch - f2;
+        prevRotationYaw += rotationYaw - f3;
+    }
+	
+	public static final boolean deleteDirectory(final File directoryToBeDeleted) {
+		final File[] allContents = directoryToBeDeleted.listFiles();
+	    if (allContents != null) {
+	        for (final File file : allContents) {
+	            deleteDirectory(file);
+	        }
+	    }
+	    return directoryToBeDeleted.delete();
+	}
+
+	public static void emptyFile(File file) throws FileNotFoundException {
+		PrintWriter writer = new PrintWriter(file);
+		writer.println("");
+		writer.close();
+	}
+	
+}
