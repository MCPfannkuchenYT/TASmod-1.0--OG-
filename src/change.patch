diff -ruN src/minecraft/net/minecraft/client/Minecraft.java newsrc/minecraft/net/minecraft/client/Minecraft.java
--- src/minecraft/net/minecraft/client/Minecraft.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/client/Minecraft.java	2021-01-01 00:00:00.000000000 +0100
@@ -126,7 +126,7 @@
 {
 
     public static byte field_28006_b[] = new byte[0xa00000];
-    private static Minecraft theMinecraft;
+    public static Minecraft theMinecraft; // Made Public, to access 'theMinecraft'
     public PlayerController playerController;
     private boolean fullscreen;
     private boolean hasCrashed;
@@ -192,7 +192,7 @@
 
     public Minecraft(Component component, Canvas canvas, MinecraftApplet minecraftapplet, int i, int j, boolean flag)
     {
-        fullscreen = false;
+    	fullscreen = false;
         hasCrashed = false;
         timer = new Timer(20F);
         session = null;
@@ -709,7 +709,7 @@
         Profiler.startSection("render");
         Profiler.startSection("display");
         GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
-        if(!Keyboard.isKeyDown(65))
+        if(!net.tasmod.virtual.VirtualKeyboard.isKeyDown(65))
         {
             Display.update();
         }
@@ -752,7 +752,7 @@
         guiAchievement.updateAchievementWindow();
         Profiler.startSection("root");
         Thread.yield();
-        if(Keyboard.isKeyDown(65))
+        if(net.tasmod.virtual.VirtualKeyboard.isKeyDown(65))
         {
             Display.update();
         }
@@ -810,7 +810,7 @@
 
     private void screenshotListener()
     {
-        if(Keyboard.isKeyDown(60))
+        if(net.tasmod.virtual.VirtualKeyboard.isKeyDown(60))
         {
             if(!isTakingScreenshot)
             {
@@ -1313,24 +1313,44 @@
                 currentScreen.updateScreen();
             }
         }
+        // Moved from EntityRenderer.java / basically just hooked up.
+        if(inGameHasFocus) {
+        	
+            float f1 = gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float f2 = f1 * f1 * f1 * 8F;
+        	
+            mouseHelper.mouseXYChange(); // Call the real one, but actually call the virtual one
+            
+            thePlayer.setAngles((float) mouseHelper.deltaX * f2, (float) mouseHelper.deltaY * f2);
+            
+            net.tasmod.Utils.prevRotationPitch = thePlayer.prevRotationPitch;
+            net.tasmod.Utils.prevRotationYaw = thePlayer.prevRotationYaw;
+            net.tasmod.Utils.rotationPitch = thePlayer.rotationPitch;
+            net.tasmod.Utils.rotationYaw = thePlayer.rotationYaw;
+        }
+        try {
+			if(net.tasmod.virtual.VirtualKeyboard.isKeyDown(37) && theWorld != null) net.tasmod.TASmod.endRecording();
+		} catch (java.io.IOException e) {
+			e.printStackTrace();
+		}
         if(currentScreen == null || currentScreen.allowUserInput)
         {
             Profiler.endStartSection("mouse");
             do
             {
-                if(!Mouse.next())
+                if(!net.tasmod.virtual.VirtualMouse.next())
                 {
                     break;
                 }
-                KeyBinding.setKeyBindState(Mouse.getEventButton() - 100, Mouse.getEventButtonState());
-                if(Mouse.getEventButtonState())
+                KeyBinding.setKeyBindState(net.tasmod.virtual.VirtualMouse.getEventButton() - 100, net.tasmod.virtual.VirtualMouse.getEventButtonState());
+                if(net.tasmod.virtual.VirtualMouse.getEventButtonState())
                 {
-                    KeyBinding.onTick(Mouse.getEventButton() - 100);
+                    KeyBinding.onTick(net.tasmod.virtual.VirtualMouse.getEventButton() - 100);
                 }
                 long l = System.currentTimeMillis() - systemTime;
                 if(l <= 200L)
                 {
-                    int i1 = Mouse.getEventDWheel();
+                    int i1 = net.tasmod.virtual.VirtualMouse.getEventDWheel();
                     if(i1 != 0)
                     {
                         thePlayer.inventory.changeCurrentItem(i1);
@@ -1349,7 +1369,7 @@
                     }
                     if(currentScreen == null)
                     {
-                        if(!inGameHasFocus && Mouse.getEventButtonState())
+                        if(!inGameHasFocus && net.tasmod.virtual.VirtualMouse.getEventButtonState())
                         {
                             setIngameFocus();
                         }
@@ -1367,18 +1387,18 @@
             Profiler.endStartSection("keyboard");
             do
             {
-                if(!Keyboard.next())
+                if(!net.tasmod.virtual.VirtualKeyboard.next())
                 {
                     break;
                 }
-                KeyBinding.setKeyBindState(Keyboard.getEventKey(), Keyboard.getEventKeyState());
-                if(Keyboard.getEventKeyState())
+                KeyBinding.setKeyBindState(net.tasmod.virtual.VirtualKeyboard.getEventKey(), net.tasmod.virtual.VirtualKeyboard.getEventKeyState());
+                if(net.tasmod.virtual.VirtualKeyboard.getEventKeyState())
                 {
-                    KeyBinding.onTick(Keyboard.getEventKey());
+                    KeyBinding.onTick(net.tasmod.virtual.VirtualKeyboard.getEventKey());
                 }
-                if(Keyboard.getEventKeyState())
+                if(net.tasmod.virtual.VirtualKeyboard.getEventKeyState())
                 {
-                    if(Keyboard.getEventKey() == 87)
+                    if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 87)
                     {
                         toggleFullscreen();
                     } else
@@ -1388,36 +1408,36 @@
                             currentScreen.handleKeyboardInput();
                         } else
                         {
-                            if(Keyboard.getEventKey() == 1)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 1)
                             {
                                 displayInGameMenu();
                             }
-                            if(Keyboard.getEventKey() == 31 && Keyboard.isKeyDown(61))
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 31 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
                             {
                                 forceReload();
                             }
-                            if(Keyboard.getEventKey() == 20 && Keyboard.isKeyDown(61))
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 20 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
                             {
                                 renderEngine.refreshTextures();
                             }
-                            if(Keyboard.getEventKey() == 33 && Keyboard.isKeyDown(61))
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 33 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
                             {
-                                boolean flag = Keyboard.isKeyDown(42) | Keyboard.isKeyDown(54);
+                                boolean flag = net.tasmod.virtual.VirtualKeyboard.isKeyDown(42) | net.tasmod.virtual.VirtualKeyboard.isKeyDown(54);
                                 gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, flag ? -1 : 1);
                             }
-                            if(Keyboard.getEventKey() == 30 && Keyboard.isKeyDown(61))
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 30 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
                             {
                                 renderGlobal.loadRenderers();
                             }
-                            if(Keyboard.getEventKey() == 59)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 59)
                             {
                                 gameSettings.hideGUI = !gameSettings.hideGUI;
                             }
-                            if(Keyboard.getEventKey() == 61)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 61)
                             {
                                 gameSettings.showDebugInfo = !gameSettings.showDebugInfo;
                             }
-                            if(Keyboard.getEventKey() == 63)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 63)
                             {
                                 gameSettings.thirdPersonView++;
                                 if(gameSettings.thirdPersonView > 2)
@@ -1425,14 +1445,14 @@
                                     gameSettings.thirdPersonView = 0;
                                 }
                             }
-                            if(Keyboard.getEventKey() == 66)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 66)
                             {
                                 gameSettings.smoothCamera = !gameSettings.smoothCamera;
                             }
                         }
                         for(int i = 0; i < 9; i++)
                         {
-                            if(Keyboard.getEventKey() == 2 + i)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 2 + i)
                             {
                                 thePlayer.inventory.currentItem = i;
                             }
@@ -1440,14 +1460,14 @@
 
                         if(gameSettings.showDebugInfo)
                         {
-                            if(Keyboard.getEventKey() == 11)
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 11)
                             {
                                 func_40003_b(0);
                             }
                             int j = 0;
                             while(j < 9) 
                             {
-                                if(Keyboard.getEventKey() == 2 + j)
+                                if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 2 + j)
                                 {
                                     func_40003_b(j + 1);
                                 }
@@ -1540,6 +1560,11 @@
         }
         Profiler.endSection();
         systemTime = System.currentTimeMillis();
+        try {
+			net.tasmod.TASmod.tick();
+		} catch (java.io.IOException e) {
+			e.printStackTrace();
+		}
     }
 
     private void forceReload()
diff -ruN src/minecraft/net/minecraft/client/Minecraft.java.bak newsrc/minecraft/net/minecraft/client/Minecraft.java.bak
--- src/minecraft/net/minecraft/client/Minecraft.java.bak	1970-01-01 01:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/client/Minecraft.java.bak	2021-01-01 00:00:00.000000000 +0100
@@ -0,0 +1,2086 @@
+// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
+// Jad home page: http://www.kpdus.com/jad.html
+// Decompiler options: packimports(3) braces deadcode fieldsfirst 
+
+package net.minecraft.client;
+
+import java.awt.BorderLayout;
+import java.awt.Canvas;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.Frame;
+import java.awt.Graphics;
+import java.io.File;
+import java.io.PrintStream;
+import java.text.DecimalFormat;
+import net.minecraft.src.Achievement;
+import net.minecraft.src.AchievementList;
+import net.minecraft.src.AxisAlignedBB;
+import net.minecraft.src.Block;
+import net.minecraft.src.BlockGrass;
+import net.minecraft.src.ChunkCoordinates;
+import net.minecraft.src.ChunkProviderLoadOrGenerate;
+import net.minecraft.src.ColorizerFoliage;
+import net.minecraft.src.ColorizerGrass;
+import net.minecraft.src.ColorizerWater;
+import net.minecraft.src.EffectRenderer;
+import net.minecraft.src.EntityClientPlayerMP;
+import net.minecraft.src.EntityLiving;
+import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.EntityPlayerSP;
+import net.minecraft.src.EntityRenderer;
+import net.minecraft.src.EnumMovingObjectType;
+import net.minecraft.src.EnumOS2;
+import net.minecraft.src.EnumOSMappingHelper;
+import net.minecraft.src.EnumOptions;
+import net.minecraft.src.FontRenderer;
+import net.minecraft.src.GLAllocation;
+import net.minecraft.src.GameSettings;
+import net.minecraft.src.GameWindowListener;
+import net.minecraft.src.GuiAchievement;
+import net.minecraft.src.GuiChat;
+import net.minecraft.src.GuiConflictWarning;
+import net.minecraft.src.GuiConnecting;
+import net.minecraft.src.GuiErrorScreen;
+import net.minecraft.src.GuiGameOver;
+import net.minecraft.src.GuiIngame;
+import net.minecraft.src.GuiIngameMenu;
+import net.minecraft.src.GuiInventory;
+import net.minecraft.src.GuiMainMenu;
+import net.minecraft.src.GuiParticle;
+import net.minecraft.src.GuiScreen;
+import net.minecraft.src.GuiSleepMP;
+import net.minecraft.src.GuiUnused;
+import net.minecraft.src.ISaveFormat;
+import net.minecraft.src.InventoryPlayer;
+import net.minecraft.src.Item;
+import net.minecraft.src.ItemRenderer;
+import net.minecraft.src.ItemStack;
+import net.minecraft.src.KeyBinding;
+import net.minecraft.src.LoadingScreenRenderer;
+import net.minecraft.src.MathHelper;
+import net.minecraft.src.MinecraftError;
+import net.minecraft.src.MinecraftException;
+import net.minecraft.src.MinecraftImpl;
+import net.minecraft.src.ModelBiped;
+import net.minecraft.src.MouseHelper;
+import net.minecraft.src.MovementInputFromOptions;
+import net.minecraft.src.MovingObjectPosition;
+import net.minecraft.src.NetClientHandler;
+import net.minecraft.src.OpenGlCapsChecker;
+import net.minecraft.src.OpenGlHelper;
+import net.minecraft.src.PlayerController;
+import net.minecraft.src.PlayerControllerCreative;
+import net.minecraft.src.Profiler;
+import net.minecraft.src.ProfilerResult;
+import net.minecraft.src.RenderBlocks;
+import net.minecraft.src.RenderEngine;
+import net.minecraft.src.RenderGlobal;
+import net.minecraft.src.RenderManager;
+import net.minecraft.src.SaveConverterMcRegion;
+import net.minecraft.src.ScaledResolution;
+import net.minecraft.src.ScreenShotHelper;
+import net.minecraft.src.Session;
+import net.minecraft.src.SoundManager;
+import net.minecraft.src.StatFileWriter;
+import net.minecraft.src.StatList;
+import net.minecraft.src.StatStringFormatKeyInv;
+import net.minecraft.src.Teleporter;
+import net.minecraft.src.Tessellator;
+import net.minecraft.src.TextureCompassFX;
+import net.minecraft.src.TextureFlamesFX;
+import net.minecraft.src.TextureLavaFX;
+import net.minecraft.src.TextureLavaFlowFX;
+import net.minecraft.src.TexturePackList;
+import net.minecraft.src.TexturePortalFX;
+import net.minecraft.src.TextureWatchFX;
+import net.minecraft.src.TextureWaterFX;
+import net.minecraft.src.TextureWaterFlowFX;
+import net.minecraft.src.ThreadCheckHasPaid;
+import net.minecraft.src.ThreadDownloadResources;
+import net.minecraft.src.ThreadSleepForever;
+import net.minecraft.src.Timer;
+import net.minecraft.src.UnexpectedThrowable;
+import net.minecraft.src.Vec3D;
+import net.minecraft.src.World;
+import net.minecraft.src.WorldInfo;
+import net.minecraft.src.WorldProvider;
+import net.minecraft.src.WorldRenderer;
+import net.minecraft.src.WorldSettings;
+import org.lwjgl.LWJGLException;
+import org.lwjgl.input.Controllers;
+import org.lwjgl.input.Keyboard;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.PixelFormat;
+import org.lwjgl.util.glu.GLU;
+
+// Referenced classes of package net.minecraft.client:
+//            MinecraftApplet
+
+public abstract class Minecraft
+    implements Runnable
+{
+
+    public static byte field_28006_b[] = new byte[0xa00000];
+    public static Minecraft theMinecraft; // Made Public, to access 'theMinecraft'
+    public PlayerController playerController;
+    private boolean fullscreen;
+    private boolean hasCrashed;
+    public int displayWidth;
+    public int displayHeight;
+    private OpenGlCapsChecker glCapabilities;
+    private Timer timer;
+    public World theWorld;
+    public RenderGlobal renderGlobal;
+    public EntityPlayerSP thePlayer;
+    public EntityLiving renderViewEntity;
+    public EffectRenderer effectRenderer;
+    public Session session;
+    public String minecraftUri;
+    public Canvas mcCanvas;
+    public boolean hideQuitButton;
+    public volatile boolean isGamePaused;
+    public RenderEngine renderEngine;
+    public FontRenderer fontRenderer;
+    public FontRenderer standardGalacticFontRenderer;
+    public GuiScreen currentScreen;
+    public LoadingScreenRenderer loadingScreen;
+    public EntityRenderer entityRenderer;
+    private ThreadDownloadResources downloadResourcesThread;
+    private int ticksRan;
+    private int leftClickCounter;
+    private int tempDisplayWidth;
+    private int tempDisplayHeight;
+    public GuiAchievement guiAchievement;
+    public GuiIngame ingameGUI;
+    public boolean skipRenderWorld;
+    public ModelBiped playerModelBiped;
+    public MovingObjectPosition objectMouseOver;
+    public GameSettings gameSettings;
+    protected MinecraftApplet mcApplet;
+    public SoundManager sndManager;
+    public MouseHelper mouseHelper;
+    public TexturePackList texturePackList;
+    public File mcDataDir;
+    private ISaveFormat saveLoader;
+    public static long frameTimes[] = new long[512];
+    public static long tickTimes[] = new long[512];
+    public static int numRecordedFrameTimes = 0;
+    public static long hasPaidCheckTime = 0L;
+    private int rightClickDelayTimer;
+    public StatFileWriter statFileWriter;
+    private String serverName;
+    private int serverPort;
+    private TextureWaterFX textureWaterFX;
+    private TextureLavaFX textureLavaFX;
+    private static File minecraftDir = null;
+    public volatile boolean running;
+    public String debug;
+    long field_40004_N;
+    int fpsCounter;
+    boolean isTakingScreenshot;
+    long prevFrameTime;
+    private String field_40006_ak;
+    public boolean inGameHasFocus;
+    public boolean isRaining;
+    long systemTime;
+    private int joinPlayerCounter;
+
+    public Minecraft(Component component, Canvas canvas, MinecraftApplet minecraftapplet, int i, int j, boolean flag)
+    {
+    	// TODO: Move this
+    	Utils.changeField("java.lang.Math$RandomNumberGeneratorHolder", "randomNumberGenerator", new FakeRandom(), true);
+      
+    	fullscreen = false;
+        hasCrashed = false;
+        timer = new Timer(20F);
+        session = null;
+        hideQuitButton = false;
+        isGamePaused = false;
+        currentScreen = null;
+        ticksRan = 0;
+        leftClickCounter = 0;
+        guiAchievement = new GuiAchievement(this);
+        skipRenderWorld = false;
+        playerModelBiped = new ModelBiped(0.0F);
+        objectMouseOver = null;
+        sndManager = new SoundManager();
+        rightClickDelayTimer = 0;
+        textureWaterFX = new TextureWaterFX();
+        textureLavaFX = new TextureLavaFX();
+        running = true;
+        debug = "";
+        field_40004_N = System.currentTimeMillis();
+        fpsCounter = 0;
+        isTakingScreenshot = false;
+        prevFrameTime = -1L;
+        field_40006_ak = "root";
+        inGameHasFocus = false;
+        isRaining = false;
+        systemTime = System.currentTimeMillis();
+        joinPlayerCounter = 0;
+        StatList.func_27360_a();
+        tempDisplayHeight = j;
+        fullscreen = flag;
+        mcApplet = minecraftapplet;
+        new ThreadSleepForever(this, "Timer hack thread");
+        mcCanvas = canvas;
+        displayWidth = i;
+        displayHeight = j;
+        fullscreen = flag;
+        if(minecraftapplet == null || "true".equals(minecraftapplet.getParameter("stand-alone")))
+        {
+            hideQuitButton = false;
+        }
+        theMinecraft = this;
+    }
+
+    public void onMinecraftCrash(UnexpectedThrowable unexpectedthrowable)
+    {
+        hasCrashed = true;
+        displayUnexpectedThrowable(unexpectedthrowable);
+    }
+
+    public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedthrowable);
+
+    public void setServer(String s, int i)
+    {
+        serverName = s;
+        serverPort = i;
+    }
+
+    public void startGame()
+        throws LWJGLException
+    {
+        if(mcCanvas != null)
+        {
+            Graphics g = mcCanvas.getGraphics();
+            if(g != null)
+            {
+                g.setColor(Color.BLACK);
+                g.fillRect(0, 0, displayWidth, displayHeight);
+                g.dispose();
+            }
+            Display.setParent(mcCanvas);
+        } else
+        if(fullscreen)
+        {
+            Display.setFullscreen(true);
+            displayWidth = Display.getDisplayMode().getWidth();
+            displayHeight = Display.getDisplayMode().getHeight();
+            if(displayWidth <= 0)
+            {
+                displayWidth = 1;
+            }
+            if(displayHeight <= 0)
+            {
+                displayHeight = 1;
+            }
+        } else
+        {
+            Display.setDisplayMode(new DisplayMode(displayWidth, displayHeight));
+        }
+        Display.setTitle("Minecraft Minecraft 1.0.0");
+        try
+        {
+            PixelFormat pixelformat = new PixelFormat();
+            pixelformat = pixelformat.withDepthBits(24);
+            Display.create(pixelformat);
+        }
+        catch(LWJGLException lwjglexception)
+        {
+            lwjglexception.printStackTrace();
+            try
+            {
+                Thread.sleep(1000L);
+            }
+            catch(InterruptedException interruptedexception) { }
+            Display.create();
+        }
+        OpenGlHelper.initializeTextures();
+        mcDataDir = getMinecraftDir();
+        saveLoader = new SaveConverterMcRegion(new File(mcDataDir, "saves"));
+        gameSettings = new GameSettings(this, mcDataDir);
+        texturePackList = new TexturePackList(this, mcDataDir);
+        renderEngine = new RenderEngine(texturePackList, gameSettings);
+        loadScreen();
+        fontRenderer = new FontRenderer(gameSettings, "/font/default.png", renderEngine);
+        standardGalacticFontRenderer = new FontRenderer(gameSettings, "/font/alternate.png", renderEngine);
+        ColorizerWater.getWaterBiomeColorizer(renderEngine.getTextureContents("/misc/watercolor.png"));
+        ColorizerGrass.setGrassBiomeColorizer(renderEngine.getTextureContents("/misc/grasscolor.png"));
+        ColorizerFoliage.getFoilageBiomeColorizer(renderEngine.getTextureContents("/misc/foliagecolor.png"));
+        entityRenderer = new EntityRenderer(this);
+        RenderManager.instance.itemRenderer = new ItemRenderer(this);
+        statFileWriter = new StatFileWriter(session, mcDataDir);
+        AchievementList.openInventory.setStatStringFormatter(new StatStringFormatKeyInv(this));
+        loadScreen();
+        Keyboard.create();
+        Mouse.create();
+        mouseHelper = new MouseHelper(mcCanvas);
+        try
+        {
+            Controllers.create();
+        }
+        catch(Exception exception)
+        {
+            exception.printStackTrace();
+        }
+        checkGLError("Pre startup");
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        GL11.glShadeModel(7425 /*GL_SMOOTH*/);
+        GL11.glClearDepth(1.0D);
+        GL11.glEnable(2929 /*GL_DEPTH_TEST*/);
+        GL11.glDepthFunc(515);
+        GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+        GL11.glAlphaFunc(516, 0.1F);
+        GL11.glCullFace(1029 /*GL_BACK*/);
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glLoadIdentity();
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        checkGLError("Startup");
+        glCapabilities = new OpenGlCapsChecker();
+        sndManager.loadSoundSettings(gameSettings);
+        renderEngine.registerTextureFX(textureLavaFX);
+        renderEngine.registerTextureFX(textureWaterFX);
+        renderEngine.registerTextureFX(new TexturePortalFX());
+        renderEngine.registerTextureFX(new TextureCompassFX(this));
+        renderEngine.registerTextureFX(new TextureWatchFX(this));
+        renderEngine.registerTextureFX(new TextureWaterFlowFX());
+        renderEngine.registerTextureFX(new TextureLavaFlowFX());
+        renderEngine.registerTextureFX(new TextureFlamesFX(0));
+        renderEngine.registerTextureFX(new TextureFlamesFX(1));
+        renderGlobal = new RenderGlobal(this, renderEngine);
+        GL11.glViewport(0, 0, displayWidth, displayHeight);
+        effectRenderer = new EffectRenderer(theWorld, renderEngine);
+        try
+        {
+            downloadResourcesThread = new ThreadDownloadResources(mcDataDir, this);
+            downloadResourcesThread.start();
+        }
+        catch(Exception exception1) { }
+        checkGLError("Post startup");
+        ingameGUI = new GuiIngame(this);
+        if(serverName != null)
+        {
+            displayGuiScreen(new GuiConnecting(this, serverName, serverPort));
+        } else
+        {
+            displayGuiScreen(new GuiMainMenu());
+        }
+        loadingScreen = new LoadingScreenRenderer(this);
+    }
+
+    private void loadScreen()
+        throws LWJGLException
+    {
+        ScaledResolution scaledresolution = new ScaledResolution(gameSettings, displayWidth, displayHeight);
+        GL11.glClear(16640);
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, scaledresolution.scaledWidthD, scaledresolution.scaledHeightD, 0.0D, 1000D, 3000D);
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -2000F);
+        GL11.glViewport(0, 0, displayWidth, displayHeight);
+        GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
+        Tessellator tessellator = Tessellator.instance;
+        GL11.glDisable(2896 /*GL_LIGHTING*/);
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        GL11.glDisable(2912 /*GL_FOG*/);
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/title/mojang.png"));
+        tessellator.startDrawingQuads();
+        tessellator.setColorOpaque_I(0xffffff);
+        tessellator.addVertexWithUV(0.0D, displayHeight, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(displayWidth, displayHeight, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+        tessellator.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+        tessellator.draw();
+        char c = '\u0100';
+        char c1 = '\u0100';
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        tessellator.setColorOpaque_I(0xffffff);
+        scaledTessellator((scaledresolution.getScaledWidth() - c) / 2, (scaledresolution.getScaledHeight() - c1) / 2, 0, 0, c, c1);
+        GL11.glDisable(2896 /*GL_LIGHTING*/);
+        GL11.glDisable(2912 /*GL_FOG*/);
+        GL11.glEnable(3008 /*GL_ALPHA_TEST*/);
+        GL11.glAlphaFunc(516, 0.1F);
+        Display.swapBuffers();
+    }
+
+    public void scaledTessellator(int i, int j, int k, int l, int i1, int j1)
+    {
+        float f = 0.00390625F;
+        float f1 = 0.00390625F;
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(i + 0, j + j1, 0.0D, (float)(k + 0) * f, (float)(l + j1) * f1);
+        tessellator.addVertexWithUV(i + i1, j + j1, 0.0D, (float)(k + i1) * f, (float)(l + j1) * f1);
+        tessellator.addVertexWithUV(i + i1, j + 0, 0.0D, (float)(k + i1) * f, (float)(l + 0) * f1);
+        tessellator.addVertexWithUV(i + 0, j + 0, 0.0D, (float)(k + 0) * f, (float)(l + 0) * f1);
+        tessellator.draw();
+    }
+
+    public static File getMinecraftDir()
+    {
+        if(minecraftDir == null)
+        {
+            minecraftDir = getAppDir("minecraft");
+        }
+        return minecraftDir;
+    }
+
+    public static File getAppDir(String s)
+    {
+        String s1 = System.getProperty("user.home", ".");
+        File file;
+        switch(EnumOSMappingHelper.enumOSMappingArray[getOs().ordinal()])
+        {
+        case 1: // '\001'
+        case 2: // '\002'
+            file = new File(s1, (new StringBuilder()).append('.').append(s).append('/').toString());
+            break;
+
+        case 3: // '\003'
+            String s2 = System.getenv("APPDATA");
+            if(s2 != null)
+            {
+                file = new File(s2, (new StringBuilder()).append(".").append(s).append('/').toString());
+            } else
+            {
+                file = new File(s1, (new StringBuilder()).append('.').append(s).append('/').toString());
+            }
+            break;
+
+        case 4: // '\004'
+            file = new File(s1, (new StringBuilder()).append("Library/Application Support/").append(s).toString());
+            break;
+
+        default:
+            file = new File(s1, (new StringBuilder()).append(s).append('/').toString());
+            break;
+        }
+        if(!file.exists() && !file.mkdirs())
+        {
+            throw new RuntimeException((new StringBuilder()).append("The working directory could not be created: ").append(file).toString());
+        } else
+        {
+            return file;
+        }
+    }
+
+    private static EnumOS2 getOs()
+    {
+        String s = System.getProperty("os.name").toLowerCase();
+        if(s.contains("win"))
+        {
+            return EnumOS2.windows;
+        }
+        if(s.contains("mac"))
+        {
+            return EnumOS2.macos;
+        }
+        if(s.contains("solaris"))
+        {
+            return EnumOS2.solaris;
+        }
+        if(s.contains("sunos"))
+        {
+            return EnumOS2.solaris;
+        }
+        if(s.contains("linux"))
+        {
+            return EnumOS2.linux;
+        }
+        if(s.contains("unix"))
+        {
+            return EnumOS2.linux;
+        } else
+        {
+            return EnumOS2.unknown;
+        }
+    }
+
+    public ISaveFormat getSaveLoader()
+    {
+        return saveLoader;
+    }
+
+    public void displayGuiScreen(GuiScreen guiscreen)
+    {
+        if(currentScreen instanceof GuiUnused)
+        {
+            return;
+        }
+        if(currentScreen != null)
+        {
+            currentScreen.onGuiClosed();
+        }
+        if(guiscreen instanceof GuiMainMenu)
+        {
+            statFileWriter.func_27175_b();
+        }
+        statFileWriter.syncStats();
+        if(guiscreen == null && theWorld == null)
+        {
+            guiscreen = new GuiMainMenu();
+        } else
+        if(guiscreen == null && thePlayer.getEntityHealth() <= 0)
+        {
+            guiscreen = new GuiGameOver();
+        }
+        if(guiscreen instanceof GuiMainMenu)
+        {
+            gameSettings.showDebugInfo = false;
+            ingameGUI.clearChatMessages();
+        }
+        currentScreen = guiscreen;
+        if(guiscreen != null)
+        {
+            setIngameNotInFocus();
+            ScaledResolution scaledresolution = new ScaledResolution(gameSettings, displayWidth, displayHeight);
+            int i = scaledresolution.getScaledWidth();
+            int j = scaledresolution.getScaledHeight();
+            guiscreen.setWorldAndResolution(this, i, j);
+            skipRenderWorld = false;
+        } else
+        {
+            setIngameFocus();
+        }
+    }
+
+    private void checkGLError(String s)
+    {
+        int i = GL11.glGetError();
+        if(i != 0)
+        {
+            String s1 = GLU.gluErrorString(i);
+            System.out.println("########## GL ERROR ##########");
+            System.out.println((new StringBuilder()).append("@ ").append(s).toString());
+            System.out.println((new StringBuilder()).append(i).append(": ").append(s1).toString());
+        }
+    }
+
+    public void shutdownMinecraftApplet()
+    {
+        try
+        {
+            statFileWriter.func_27175_b();
+            statFileWriter.syncStats();
+            if(mcApplet != null)
+            {
+                mcApplet.clearApplet();
+            }
+            try
+            {
+                if(downloadResourcesThread != null)
+                {
+                    downloadResourcesThread.closeMinecraft();
+                }
+            }
+            catch(Exception exception) { }
+            System.out.println("Stopping!");
+            try
+            {
+                changeWorld1(null);
+            }
+            catch(Throwable throwable) { }
+            try
+            {
+                GLAllocation.deleteTexturesAndDisplayLists();
+            }
+            catch(Throwable throwable1) { }
+            sndManager.closeMinecraft();
+            Mouse.destroy();
+            Keyboard.destroy();
+        }
+        finally
+        {
+            Display.destroy();
+            if(!hasCrashed)
+            {
+                System.exit(0);
+            }
+        }
+        System.gc();
+    }
+
+    public void run()
+    {
+        running = true;
+        try
+        {
+            startGame();
+        }
+        catch(Exception exception)
+        {
+            exception.printStackTrace();
+            onMinecraftCrash(new UnexpectedThrowable("Failed to start game", exception));
+            return;
+        }
+        try
+        {
+            while(running) 
+            {
+                try
+                {
+                    func_40001_x();
+                }
+                catch(MinecraftException minecraftexception)
+                {
+                    theWorld = null;
+                    changeWorld1(null);
+                    displayGuiScreen(new GuiConflictWarning());
+                }
+                catch(OutOfMemoryError outofmemoryerror)
+                {
+                    freeMemory();
+                    displayGuiScreen(new GuiErrorScreen());
+                    System.gc();
+                }
+            }
+        }
+        catch(MinecraftError minecrafterror) { }
+        catch(Throwable throwable)
+        {
+            freeMemory();
+            throwable.printStackTrace();
+            onMinecraftCrash(new UnexpectedThrowable("Unexpected error", throwable));
+        }
+        finally
+        {
+            shutdownMinecraftApplet();
+        }
+    }
+
+    private void func_40001_x()
+    {
+        if(mcApplet != null && !mcApplet.isActive())
+        {
+            running = false;
+            return;
+        }
+        AxisAlignedBB.clearBoundingBoxPool();
+        Vec3D.initialize();
+        Profiler.startSection("root");
+        if(mcCanvas == null && Display.isCloseRequested())
+        {
+            shutdown();
+        }
+        if(isGamePaused && theWorld != null)
+        {
+            float f = timer.renderPartialTicks;
+            timer.updateTimer();
+            timer.renderPartialTicks = f;
+        } else
+        {
+            timer.updateTimer();
+        }
+        long l = System.nanoTime();
+        Profiler.startSection("tick");
+        for(int i = 0; i < timer.elapsedTicks; i++)
+        {
+            ticksRan++;
+            try
+            {
+                runTick();
+                continue;
+            }
+            catch(MinecraftException minecraftexception)
+            {
+                theWorld = null;
+            }
+            changeWorld1(null);
+            displayGuiScreen(new GuiConflictWarning());
+        }
+
+        Profiler.endSection();
+        long l1 = System.nanoTime() - l;
+        checkGLError("Pre render");
+        RenderBlocks.fancyGrass = gameSettings.fancyGraphics;
+        Profiler.startSection("sound");
+        sndManager.func_338_a(thePlayer, timer.renderPartialTicks);
+        Profiler.endStartSection("updatelights");
+        if(theWorld != null)
+        {
+            theWorld.updatingLighting();
+        }
+        Profiler.endSection();
+        Profiler.startSection("render");
+        Profiler.startSection("display");
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        if(!net.tasmod.virtual.VirtualKeyboard.isKeyDown(65))
+        {
+            Display.update();
+        }
+        if(thePlayer != null && thePlayer.isEntityInsideOpaqueBlock())
+        {
+            gameSettings.thirdPersonView = 0;
+        }
+        Profiler.endSection();
+        if(!skipRenderWorld)
+        {
+            Profiler.startSection("gameMode");
+            if(playerController != null)
+            {
+                playerController.setPartialTime(timer.renderPartialTicks);
+            }
+            Profiler.endStartSection("gameRenderer");
+            entityRenderer.updateCameraAndRender(timer.renderPartialTicks);
+            Profiler.endSection();
+        }
+        GL11.glFlush();
+        Profiler.endSection();
+        if(!Display.isActive() && fullscreen)
+        {
+            toggleFullscreen();
+        }
+        Profiler.endSection();
+        if(gameSettings.showDebugInfo)
+        {
+            if(!Profiler.profilingEnabled)
+            {
+                Profiler.clearProfiling();
+            }
+            Profiler.profilingEnabled = true;
+            displayDebugInfo(l1);
+        } else
+        {
+            Profiler.profilingEnabled = false;
+            prevFrameTime = System.nanoTime();
+        }
+        guiAchievement.updateAchievementWindow();
+        Profiler.startSection("root");
+        Thread.yield();
+        if(net.tasmod.virtual.VirtualKeyboard.isKeyDown(65))
+        {
+            Display.update();
+        }
+        screenshotListener();
+        if(mcCanvas != null && !fullscreen && (mcCanvas.getWidth() != displayWidth || mcCanvas.getHeight() != displayHeight))
+        {
+            displayWidth = mcCanvas.getWidth();
+            displayHeight = mcCanvas.getHeight();
+            if(displayWidth <= 0)
+            {
+                displayWidth = 1;
+            }
+            if(displayHeight <= 0)
+            {
+                displayHeight = 1;
+            }
+            resize(displayWidth, displayHeight);
+        }
+        checkGLError("Post render");
+        fpsCounter++;
+        isGamePaused = !isMultiplayerWorld() && currentScreen != null && currentScreen.doesGuiPauseGame();
+        while(System.currentTimeMillis() >= field_40004_N + 1000L) 
+        {
+            debug = (new StringBuilder()).append(fpsCounter).append(" fps, ").append(WorldRenderer.chunksUpdated).append(" chunk updates").toString();
+            WorldRenderer.chunksUpdated = 0;
+            field_40004_N += 1000L;
+            fpsCounter = 0;
+        }
+        Profiler.endSection();
+    }
+
+    public void freeMemory()
+    {
+        try
+        {
+            field_28006_b = new byte[0];
+            renderGlobal.func_28137_f();
+        }
+        catch(Throwable throwable) { }
+        try
+        {
+            System.gc();
+            AxisAlignedBB.clearBoundingBoxes();
+            Vec3D.clearVectorList();
+        }
+        catch(Throwable throwable1) { }
+        try
+        {
+            System.gc();
+            changeWorld1(null);
+        }
+        catch(Throwable throwable2) { }
+        System.gc();
+    }
+
+    private void screenshotListener()
+    {
+        if(net.tasmod.virtual.VirtualKeyboard.isKeyDown(60))
+        {
+            if(!isTakingScreenshot)
+            {
+                isTakingScreenshot = true;
+                ingameGUI.addChatMessage(ScreenShotHelper.saveScreenshot(minecraftDir, displayWidth, displayHeight));
+            }
+        } else
+        {
+            isTakingScreenshot = false;
+        }
+    }
+
+    private void func_40003_b(int i)
+    {
+        java.util.List list;
+        ProfilerResult profilerresult;
+        list = Profiler.getProfilingData(field_40006_ak);
+        if(list == null || list.size() == 0)
+        {
+            return;
+        }
+        profilerresult = (ProfilerResult)list.remove(0);
+        if(i == 0)
+        {
+            if(profilerresult.field_40703_c.length() > 0)
+            {
+                int j = field_40006_ak.lastIndexOf(".");
+                if(j >= 0)
+                {
+                    field_40006_ak = field_40006_ak.substring(0, j);
+                }
+            }
+        }
+        else
+        {
+            if(--i < list.size() && !((ProfilerResult)list.get(i)).field_40703_c.equals("unspecified"))
+            {
+                if(field_40006_ak.length() > 0)
+                {
+                    field_40006_ak += ".";
+                }
+                field_40006_ak += ((ProfilerResult)list.get(i)).field_40703_c;
+            }
+        }
+    }
+
+    private void displayDebugInfo(long l)
+    {
+        java.util.List list = Profiler.getProfilingData(field_40006_ak);
+        ProfilerResult profilerresult = (ProfilerResult)list.remove(0);
+        long l1 = 0xfe502aL;
+        if(prevFrameTime == -1L)
+        {
+            prevFrameTime = System.nanoTime();
+        }
+        long l2 = System.nanoTime();
+        tickTimes[numRecordedFrameTimes & frameTimes.length - 1] = l;
+        frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = l2 - prevFrameTime;
+        prevFrameTime = l2;
+        GL11.glClear(256);
+        GL11.glMatrixMode(5889 /*GL_PROJECTION*/);
+        GL11.glEnable(2903 /*GL_COLOR_MATERIAL*/);
+        GL11.glLoadIdentity();
+        GL11.glOrtho(0.0D, displayWidth, displayHeight, 0.0D, 1000D, 3000D);
+        GL11.glMatrixMode(5888 /*GL_MODELVIEW0_ARB*/);
+        GL11.glLoadIdentity();
+        GL11.glTranslatef(0.0F, 0.0F, -2000F);
+        GL11.glLineWidth(1.0F);
+        GL11.glDisable(3553 /*GL_TEXTURE_2D*/);
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawing(7);
+        int i = (int)(l1 / 0x30d40L);
+        tessellator.setColorOpaque_I(0x20000000);
+        tessellator.addVertex(0.0D, displayHeight - i, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i, 0.0D);
+        tessellator.setColorOpaque_I(0x20200000);
+        tessellator.addVertex(0.0D, displayHeight - i * 2, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight - i, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - i * 2, 0.0D);
+        tessellator.draw();
+        long l3 = 0L;
+        for(int j = 0; j < frameTimes.length; j++)
+        {
+            l3 += frameTimes[j];
+        }
+
+        int k = (int)(l3 / 0x30d40L / (long)frameTimes.length);
+        tessellator.startDrawing(7);
+        tessellator.setColorOpaque_I(0x20400000);
+        tessellator.addVertex(0.0D, displayHeight - k, 0.0D);
+        tessellator.addVertex(0.0D, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight, 0.0D);
+        tessellator.addVertex(frameTimes.length, displayHeight - k, 0.0D);
+        tessellator.draw();
+        tessellator.startDrawing(1);
+        for(int i1 = 0; i1 < frameTimes.length; i1++)
+        {
+            int k1 = ((i1 - numRecordedFrameTimes & frameTimes.length - 1) * 255) / frameTimes.length;
+            int j2 = (k1 * k1) / 255;
+            j2 = (j2 * j2) / 255;
+            int i3 = (j2 * j2) / 255;
+            i3 = (i3 * i3) / 255;
+            if(frameTimes[i1] > l1)
+            {
+                tessellator.setColorOpaque_I(0xff000000 + j2 * 0x10000);
+            } else
+            {
+                tessellator.setColorOpaque_I(0xff000000 + j2 * 256);
+            }
+            long l4 = frameTimes[i1] / 0x30d40L;
+            long l5 = tickTimes[i1] / 0x30d40L;
+            tessellator.addVertex((float)i1 + 0.5F, (float)((long)displayHeight - l4) + 0.5F, 0.0D);
+            tessellator.addVertex((float)i1 + 0.5F, (float)displayHeight + 0.5F, 0.0D);
+            tessellator.setColorOpaque_I(0xff000000 + j2 * 0x10000 + j2 * 256 + j2 * 1);
+            tessellator.addVertex((float)i1 + 0.5F, (float)((long)displayHeight - l4) + 0.5F, 0.0D);
+            tessellator.addVertex((float)i1 + 0.5F, (float)((long)displayHeight - (l4 - l5)) + 0.5F, 0.0D);
+        }
+
+        tessellator.draw();
+        int j1 = 160;
+        int i2 = displayWidth - j1 - 10;
+        int k2 = displayHeight - j1 * 2;
+        GL11.glEnable(3042 /*GL_BLEND*/);
+        tessellator.startDrawingQuads();
+        tessellator.setColorRGBA_I(0, 200);
+        tessellator.addVertex((float)i2 - (float)j1 * 1.1F, (float)k2 - (float)j1 * 0.6F - 16F, 0.0D);
+        tessellator.addVertex((float)i2 - (float)j1 * 1.1F, k2 + j1 * 2, 0.0D);
+        tessellator.addVertex((float)i2 + (float)j1 * 1.1F, k2 + j1 * 2, 0.0D);
+        tessellator.addVertex((float)i2 + (float)j1 * 1.1F, (float)k2 - (float)j1 * 0.6F - 16F, 0.0D);
+        tessellator.draw();
+        GL11.glDisable(3042 /*GL_BLEND*/);
+        double d = 0.0D;
+        for(int j3 = 0; j3 < list.size(); j3++)
+        {
+            ProfilerResult profilerresult1 = (ProfilerResult)list.get(j3);
+            int i4 = MathHelper.floor_double(profilerresult1.field_40704_a / 4D) + 1;
+            tessellator.startDrawing(6);
+            tessellator.setColorOpaque_I(profilerresult1.func_40700_a());
+            tessellator.addVertex(i2, k2, 0.0D);
+            for(int k4 = i4; k4 >= 0; k4--)
+            {
+                float f = (float)(((d + (profilerresult1.field_40704_a * (double)k4) / (double)i4) * 3.1415927410125732D * 2D) / 100D);
+                float f2 = MathHelper.sin(f) * (float)j1;
+                float f4 = MathHelper.cos(f) * (float)j1 * 0.5F;
+                tessellator.addVertex((float)i2 + f2, (float)k2 - f4, 0.0D);
+            }
+
+            tessellator.draw();
+            tessellator.startDrawing(5);
+            tessellator.setColorOpaque_I((profilerresult1.func_40700_a() & 0xfefefe) >> 1);
+            for(int i5 = i4; i5 >= 0; i5--)
+            {
+                float f1 = (float)(((d + (profilerresult1.field_40704_a * (double)i5) / (double)i4) * 3.1415927410125732D * 2D) / 100D);
+                float f3 = MathHelper.sin(f1) * (float)j1;
+                float f5 = MathHelper.cos(f1) * (float)j1 * 0.5F;
+                tessellator.addVertex((float)i2 + f3, (float)k2 - f5, 0.0D);
+                tessellator.addVertex((float)i2 + f3, ((float)k2 - f5) + 10F, 0.0D);
+            }
+
+            tessellator.draw();
+            d += profilerresult1.field_40704_a;
+        }
+
+        DecimalFormat decimalformat = new DecimalFormat("##0.00");
+        GL11.glEnable(3553 /*GL_TEXTURE_2D*/);
+        String s = "";
+        if(!profilerresult.field_40703_c.equals("unspecified"))
+        {
+            s = (new StringBuilder()).append(s).append("[0] ").toString();
+        }
+        if(profilerresult.field_40703_c.length() == 0)
+        {
+            s = (new StringBuilder()).append(s).append("ROOT ").toString();
+        } else
+        {
+            s = (new StringBuilder()).append(s).append(profilerresult.field_40703_c).append(" ").toString();
+        }
+        int j4 = 0xffffff;
+        fontRenderer.drawStringWithShadow(s, i2 - j1, k2 - j1 / 2 - 16, j4);
+        fontRenderer.drawStringWithShadow(s = (new StringBuilder()).append(decimalformat.format(profilerresult.field_40702_b)).append("%").toString(), (i2 + j1) - fontRenderer.getStringWidth(s), k2 - j1 / 2 - 16, j4);
+        for(int k3 = 0; k3 < list.size(); k3++)
+        {
+            ProfilerResult profilerresult2 = (ProfilerResult)list.get(k3);
+            String s1 = "";
+            if(!profilerresult2.field_40703_c.equals("unspecified"))
+            {
+                s1 = (new StringBuilder()).append(s1).append("[").append(k3 + 1).append("] ").toString();
+            } else
+            {
+                s1 = (new StringBuilder()).append(s1).append("[?] ").toString();
+            }
+            s1 = (new StringBuilder()).append(s1).append(profilerresult2.field_40703_c).toString();
+            fontRenderer.drawStringWithShadow(s1, i2 - j1, k2 + j1 / 2 + k3 * 8 + 20, profilerresult2.func_40700_a());
+            fontRenderer.drawStringWithShadow(s1 = (new StringBuilder()).append(decimalformat.format(profilerresult2.field_40704_a)).append("%").toString(), (i2 + j1) - 50 - fontRenderer.getStringWidth(s1), k2 + j1 / 2 + k3 * 8 + 20, profilerresult2.func_40700_a());
+            fontRenderer.drawStringWithShadow(s1 = (new StringBuilder()).append(decimalformat.format(profilerresult2.field_40702_b)).append("%").toString(), (i2 + j1) - fontRenderer.getStringWidth(s1), k2 + j1 / 2 + k3 * 8 + 20, profilerresult2.func_40700_a());
+        }
+
+    }
+
+    public void shutdown()
+    {
+        running = false;
+    }
+
+    public void setIngameFocus()
+    {
+        if(!Display.isActive())
+        {
+            return;
+        }
+        if(inGameHasFocus)
+        {
+            return;
+        } else
+        {
+            inGameHasFocus = true;
+            mouseHelper.grabMouseCursor();
+            displayGuiScreen(null);
+            leftClickCounter = 10000;
+            return;
+        }
+    }
+
+    public void setIngameNotInFocus()
+    {
+        if(!inGameHasFocus)
+        {
+            return;
+        } else
+        {
+            KeyBinding.unPressAllKeys();
+            inGameHasFocus = false;
+            mouseHelper.ungrabMouseCursor();
+            return;
+        }
+    }
+
+    public void displayInGameMenu()
+    {
+        if(currentScreen != null)
+        {
+            return;
+        } else
+        {
+            displayGuiScreen(new GuiIngameMenu());
+            return;
+        }
+    }
+
+    private void sendClickBlockToController(int i, boolean flag)
+    {
+        if(!flag)
+        {
+            leftClickCounter = 0;
+        }
+        if(i == 0 && leftClickCounter > 0)
+        {
+            return;
+        }
+        if(flag && objectMouseOver != null && objectMouseOver.typeOfHit == EnumMovingObjectType.TILE && i == 0)
+        {
+            int j = objectMouseOver.blockX;
+            int k = objectMouseOver.blockY;
+            int l = objectMouseOver.blockZ;
+            playerController.sendBlockRemoving(j, k, l, objectMouseOver.sideHit);
+            if(thePlayer.func_35190_e(j, k, l))
+            {
+                effectRenderer.addBlockHitEffects(j, k, l, objectMouseOver.sideHit);
+                thePlayer.swingItem();
+            }
+        } else
+        {
+            playerController.resetBlockRemoving();
+        }
+    }
+
+    private void clickMouse(int i)
+    {
+        if(i == 0 && leftClickCounter > 0)
+        {
+            return;
+        }
+        if(i == 0)
+        {
+            thePlayer.swingItem();
+        }
+        if(i == 1)
+        {
+            rightClickDelayTimer = 4;
+        }
+        boolean flag = true;
+        ItemStack itemstack = thePlayer.inventory.getCurrentItem();
+        if(objectMouseOver == null)
+        {
+            if(i == 0 && playerController.func_35641_g())
+            {
+                leftClickCounter = 10;
+            }
+        } else
+        if(objectMouseOver.typeOfHit == EnumMovingObjectType.ENTITY)
+        {
+            if(i == 0)
+            {
+                playerController.attackEntity(thePlayer, objectMouseOver.entityHit);
+            }
+            if(i == 1)
+            {
+                playerController.interactWithEntity(thePlayer, objectMouseOver.entityHit);
+            }
+        } else
+        if(objectMouseOver.typeOfHit == EnumMovingObjectType.TILE)
+        {
+            int j = objectMouseOver.blockX;
+            int k = objectMouseOver.blockY;
+            int l = objectMouseOver.blockZ;
+            int i1 = objectMouseOver.sideHit;
+            if(i == 0)
+            {
+                playerController.clickBlock(j, k, l, objectMouseOver.sideHit);
+            } else
+            {
+                ItemStack itemstack2 = itemstack;
+                int j1 = itemstack2 == null ? 0 : itemstack2.stackSize;
+                if(playerController.sendPlaceBlock(thePlayer, theWorld, itemstack2, j, k, l, i1))
+                {
+                    flag = false;
+                    thePlayer.swingItem();
+                }
+                if(itemstack2 == null)
+                {
+                    return;
+                }
+                if(itemstack2.stackSize == 0)
+                {
+                    thePlayer.inventory.mainInventory[thePlayer.inventory.currentItem] = null;
+                } else
+                if(itemstack2.stackSize != j1 || playerController.isInCreativeMode())
+                {
+                    entityRenderer.itemRenderer.func_9449_b();
+                }
+            }
+        }
+        if(flag && i == 1)
+        {
+            ItemStack itemstack1 = thePlayer.inventory.getCurrentItem();
+            if(itemstack1 != null && playerController.sendUseItem(thePlayer, theWorld, itemstack1))
+            {
+                entityRenderer.itemRenderer.func_9450_c();
+            }
+        }
+    }
+
+    public void toggleFullscreen()
+    {
+        try
+        {
+            fullscreen = !fullscreen;
+            if(fullscreen)
+            {
+                Display.setDisplayMode(Display.getDesktopDisplayMode());
+                displayWidth = Display.getDisplayMode().getWidth();
+                displayHeight = Display.getDisplayMode().getHeight();
+                if(displayWidth <= 0)
+                {
+                    displayWidth = 1;
+                }
+                if(displayHeight <= 0)
+                {
+                    displayHeight = 1;
+                }
+            } else
+            {
+                if(mcCanvas != null)
+                {
+                    displayWidth = mcCanvas.getWidth();
+                    displayHeight = mcCanvas.getHeight();
+                } else
+                {
+                    displayWidth = tempDisplayWidth;
+                    displayHeight = tempDisplayHeight;
+                }
+                if(displayWidth <= 0)
+                {
+                    displayWidth = 1;
+                }
+                if(displayHeight <= 0)
+                {
+                    displayHeight = 1;
+                }
+            }
+            if(currentScreen != null)
+            {
+                resize(displayWidth, displayHeight);
+            }
+            Display.setFullscreen(fullscreen);
+            Display.update();
+        }
+        catch(Exception exception)
+        {
+            exception.printStackTrace();
+        }
+    }
+
+    private void resize(int i, int j)
+    {
+        if(i <= 0)
+        {
+            i = 1;
+        }
+        if(j <= 0)
+        {
+            j = 1;
+        }
+        displayWidth = i;
+        displayHeight = j;
+        if(currentScreen != null)
+        {
+            ScaledResolution scaledresolution = new ScaledResolution(gameSettings, i, j);
+            int k = scaledresolution.getScaledWidth();
+            int l = scaledresolution.getScaledHeight();
+            currentScreen.setWorldAndResolution(this, k, l);
+        }
+    }
+
+    private void startThreadCheckHasPaid()
+    {
+        (new ThreadCheckHasPaid(this)).start();
+    }
+
+    public void runTick()
+    {
+        if(rightClickDelayTimer > 0)
+        {
+            rightClickDelayTimer--;
+        }
+        if(ticksRan == 6000)
+        {
+            startThreadCheckHasPaid();
+        }
+        Profiler.startSection("stats");
+        statFileWriter.func_27178_d();
+        Profiler.endStartSection("gui");
+        if(!isGamePaused)
+        {
+            ingameGUI.updateTick();
+        }
+        Profiler.endStartSection("pick");
+        entityRenderer.getMouseOver(1.0F);
+        Profiler.endStartSection("centerChunkSource");
+        if(thePlayer != null)
+        {
+            net.minecraft.src.IChunkProvider ichunkprovider = theWorld.getIChunkProvider();
+            if(ichunkprovider instanceof ChunkProviderLoadOrGenerate)
+            {
+                ChunkProviderLoadOrGenerate chunkproviderloadorgenerate = (ChunkProviderLoadOrGenerate)ichunkprovider;
+                int k = MathHelper.floor_float((int)thePlayer.posX) >> 4;
+                int j1 = MathHelper.floor_float((int)thePlayer.posZ) >> 4;
+                chunkproviderloadorgenerate.setCurrentChunkOver(k, j1);
+            }
+        }
+        Profiler.endStartSection("gameMode");
+        if(!isGamePaused && theWorld != null)
+        {
+            playerController.updateController();
+        }
+        GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, renderEngine.getTexture("/terrain.png"));
+        Profiler.endStartSection("textures");
+        if(!isGamePaused)
+        {
+            renderEngine.updateDynamicTextures();
+        }
+        if(currentScreen == null && thePlayer != null)
+        {
+            if(thePlayer.getEntityHealth() <= 0)
+            {
+                displayGuiScreen(null);
+            } else
+            if(thePlayer.isPlayerSleeping() && theWorld != null && theWorld.multiplayerWorld)
+            {
+                displayGuiScreen(new GuiSleepMP());
+            }
+        } else
+        if(currentScreen != null && (currentScreen instanceof GuiSleepMP) && !thePlayer.isPlayerSleeping())
+        {
+            displayGuiScreen(null);
+        }
+        if(currentScreen != null)
+        {
+            leftClickCounter = 10000;
+        }
+        if(currentScreen != null)
+        {
+            currentScreen.handleInput();
+            if(currentScreen != null)
+            {
+                currentScreen.guiParticles.update();
+                currentScreen.updateScreen();
+            }
+        }
+        // Moved from EntityRenderer.java / basically just hooked up.
+        if(inGameHasFocus) {
+        	
+            float f1 = gameSettings.mouseSensitivity * 0.6F + 0.2F;
+            float f2 = f1 * f1 * f1 * 8F;
+        	
+            mouseHelper.mouseXYChange(); // Call the real one, but actually call the virtual one
+            
+            thePlayer.setAngles((float) mouseHelper.deltaX * f2, (float) mouseHelper.deltaY * f2);
+            
+            Utils.prevRotationPitch = thePlayer.prevRotationPitch;
+            Utils.prevRotationYaw = thePlayer.prevRotationYaw;
+            Utils.rotationPitch = thePlayer.rotationPitch;
+            Utils.rotationYaw = thePlayer.rotationYaw;
+        }
+        try {
+			if(VirtualKeyboard.isKeyDown(37) && theWorld != null) TASmod.endRecording();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+        if(currentScreen == null || currentScreen.allowUserInput)
+        {
+            Profiler.endStartSection("mouse");
+            do
+            {
+                if(!net.tasmod.virtual.VirtualMouse.next())
+                {
+                    break;
+                }
+                KeyBinding.setKeyBindState(net.tasmod.virtual.VirtualMouse.getEventButton() - 100, net.tasmod.virtual.VirtualMouse.getEventButtonState());
+                if(net.tasmod.virtual.VirtualMouse.getEventButtonState())
+                {
+                    KeyBinding.onTick(net.tasmod.virtual.VirtualMouse.getEventButton() - 100);
+                }
+                long l = System.currentTimeMillis() - systemTime;
+                if(l <= 200L)
+                {
+                    int i1 = net.tasmod.virtual.VirtualMouse.getEventDWheel();
+                    if(i1 != 0)
+                    {
+                        thePlayer.inventory.changeCurrentItem(i1);
+                        if(gameSettings.noclip)
+                        {
+                            if(i1 > 0)
+                            {
+                                i1 = 1;
+                            }
+                            if(i1 < 0)
+                            {
+                                i1 = -1;
+                            }
+                            gameSettings.noclipRate += (float)i1 * 0.25F;
+                        }
+                    }
+                    if(currentScreen == null)
+                    {
+                        if(!inGameHasFocus && net.tasmod.virtual.VirtualMouse.getEventButtonState())
+                        {
+                            setIngameFocus();
+                        }
+                    } else
+                    if(currentScreen != null)
+                    {
+                        currentScreen.handleMouseInput();
+                    }
+                }
+            } while(true);
+            if(leftClickCounter > 0)
+            {
+                leftClickCounter--;
+            }
+            Profiler.endStartSection("keyboard");
+            do
+            {
+                if(!net.tasmod.virtual.VirtualKeyboard.next())
+                {
+                    break;
+                }
+                KeyBinding.setKeyBindState(net.tasmod.virtual.VirtualKeyboard.getEventKey(), net.tasmod.virtual.VirtualKeyboard.getEventKeyState());
+                if(net.tasmod.virtual.VirtualKeyboard.getEventKeyState())
+                {
+                    KeyBinding.onTick(net.tasmod.virtual.VirtualKeyboard.getEventKey());
+                }
+                if(net.tasmod.virtual.VirtualKeyboard.getEventKeyState())
+                {
+                    if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 87)
+                    {
+                        toggleFullscreen();
+                    } else
+                    {
+                        if(currentScreen != null)
+                        {
+                            currentScreen.handleKeyboardInput();
+                        } else
+                        {
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 1)
+                            {
+                                displayInGameMenu();
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 31 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
+                            {
+                                forceReload();
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 20 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
+                            {
+                                renderEngine.refreshTextures();
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 33 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
+                            {
+                                boolean flag = net.tasmod.virtual.VirtualKeyboard.isKeyDown(42) | net.tasmod.virtual.VirtualKeyboard.isKeyDown(54);
+                                gameSettings.setOptionValue(EnumOptions.RENDER_DISTANCE, flag ? -1 : 1);
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 30 && net.tasmod.virtual.VirtualKeyboard.isKeyDown(61))
+                            {
+                                renderGlobal.loadRenderers();
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 59)
+                            {
+                                gameSettings.hideGUI = !gameSettings.hideGUI;
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 61)
+                            {
+                                gameSettings.showDebugInfo = !gameSettings.showDebugInfo;
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 63)
+                            {
+                                gameSettings.thirdPersonView++;
+                                if(gameSettings.thirdPersonView > 2)
+                                {
+                                    gameSettings.thirdPersonView = 0;
+                                }
+                            }
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 66)
+                            {
+                                gameSettings.smoothCamera = !gameSettings.smoothCamera;
+                            }
+                        }
+                        for(int i = 0; i < 9; i++)
+                        {
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 2 + i)
+                            {
+                                thePlayer.inventory.currentItem = i;
+                            }
+                        }
+
+                        if(gameSettings.showDebugInfo)
+                        {
+                            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 11)
+                            {
+                                func_40003_b(0);
+                            }
+                            int j = 0;
+                            while(j < 9) 
+                            {
+                                if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 2 + j)
+                                {
+                                    func_40003_b(j + 1);
+                                }
+                                j++;
+                            }
+                        }
+                    }
+                }
+            } while(true);
+            for(; gameSettings.keyBindInventory.isPressed(); displayGuiScreen(new GuiInventory(thePlayer))) { }
+            for(; gameSettings.keyBindDrop.isPressed(); thePlayer.dropCurrentItem()) { }
+            for(; isMultiplayerWorld() && gameSettings.keyBindChat.isPressed(); displayGuiScreen(new GuiChat())) { }
+            if(thePlayer.isUsingItem())
+            {
+                if(!gameSettings.keyBindUseItem.pressed)
+                {
+                    playerController.onStoppedUsingItem(thePlayer);
+                }
+                while(gameSettings.keyBindAttack.isPressed()) ;
+                while(gameSettings.keyBindUseItem.isPressed()) ;
+                while(gameSettings.keyBindPickBlock.isPressed()) ;
+            } else
+            {
+                for(; gameSettings.keyBindAttack.isPressed(); clickMouse(0)) { }
+                for(; gameSettings.keyBindUseItem.isPressed(); clickMouse(1)) { }
+                for(; gameSettings.keyBindPickBlock.isPressed(); clickMiddleMouseButton()) { }
+            }
+            if(gameSettings.keyBindUseItem.pressed && rightClickDelayTimer == 0 && !thePlayer.isUsingItem())
+            {
+                clickMouse(1);
+            }
+            sendClickBlockToController(0, currentScreen == null && gameSettings.keyBindAttack.pressed && inGameHasFocus);
+        }
+        if(theWorld != null)
+        {
+            if(thePlayer != null)
+            {
+                joinPlayerCounter++;
+                if(joinPlayerCounter == 30)
+                {
+                    joinPlayerCounter = 0;
+                    theWorld.joinEntityInSurroundings(thePlayer);
+                }
+            }
+            if(theWorld.getWorldInfo().isHardcoreModeEnabled())
+            {
+                theWorld.difficultySetting = 3;
+            } else
+            {
+                theWorld.difficultySetting = gameSettings.difficulty;
+            }
+            if(theWorld.multiplayerWorld)
+            {
+                theWorld.difficultySetting = 1;
+            }
+            Profiler.endStartSection("gameRenderer");
+            if(!isGamePaused)
+            {
+                entityRenderer.updateRenderer();
+            }
+            Profiler.endStartSection("levelRenderer");
+            if(!isGamePaused)
+            {
+                renderGlobal.updateClouds();
+            }
+            Profiler.endStartSection("level");
+            if(!isGamePaused)
+            {
+                if(theWorld.lightningFlash > 0)
+                {
+                    theWorld.lightningFlash--;
+                }
+                theWorld.updateEntities();
+            }
+            if(!isGamePaused || isMultiplayerWorld())
+            {
+                theWorld.setAllowedMobSpawns(theWorld.difficultySetting > 0, true);
+                theWorld.tick();
+            }
+            Profiler.endStartSection("animateTick");
+            if(!isGamePaused && theWorld != null)
+            {
+                theWorld.randomDisplayUpdates(MathHelper.floor_double(thePlayer.posX), MathHelper.floor_double(thePlayer.posY), MathHelper.floor_double(thePlayer.posZ));
+            }
+            Profiler.endStartSection("particles");
+            if(!isGamePaused)
+            {
+                effectRenderer.updateEffects();
+            }
+        }
+        Profiler.endSection();
+        systemTime = System.currentTimeMillis();
+        try {
+			TASmod.tick();
+		} catch (java.lang.IOException e) {
+			e.printStackTrace();
+		}
+    }
+
+    private void forceReload()
+    {
+        System.out.println("FORCING RELOAD!");
+        sndManager = new SoundManager();
+        sndManager.loadSoundSettings(gameSettings);
+        downloadResourcesThread.reloadResources();
+    }
+
+    public boolean isMultiplayerWorld()
+    {
+        return theWorld != null && theWorld.multiplayerWorld;
+    }
+
+    public void startWorld(String s, String s1, WorldSettings worldsettings)
+    {
+        changeWorld1(null);
+        System.gc();
+        if(saveLoader.isOldMapFormat(s))
+        {
+            convertMapFormat(s, s1);
+        } else
+        {
+            if(loadingScreen != null)
+            {
+                loadingScreen.printText("Switching level");
+                loadingScreen.displayLoadingString("");
+            }
+            net.minecraft.src.ISaveHandler isavehandler = saveLoader.getSaveLoader(s, false);
+            World world = null;
+            world = new World(isavehandler, s1, worldsettings);
+            if(world.isNewWorld)
+            {
+                statFileWriter.readStat(StatList.createWorldStat, 1);
+                statFileWriter.readStat(StatList.startGameStat, 1);
+                changeWorld2(world, "Generating level");
+            } else
+            {
+                statFileWriter.readStat(StatList.loadWorldStat, 1);
+                statFileWriter.readStat(StatList.startGameStat, 1);
+                changeWorld2(world, "Loading level");
+            }
+        }
+    }
+
+    public void usePortal(int i)
+    {
+        int j = thePlayer.dimension;
+        thePlayer.dimension = i;
+        theWorld.setEntityDead(thePlayer);
+        thePlayer.isDead = false;
+        double d = thePlayer.posX;
+        double d1 = thePlayer.posZ;
+        double d2 = 1.0D;
+        if(j > -1 && thePlayer.dimension == -1)
+        {
+            d2 = 0.125D;
+        } else
+        if(j == -1 && thePlayer.dimension > -1)
+        {
+            d2 = 8D;
+        }
+        d *= d2;
+        d1 *= d2;
+        if(thePlayer.dimension == -1)
+        {
+            thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+            if(thePlayer.isEntityAlive())
+            {
+                theWorld.updateEntityWithOptionalForce(thePlayer, false);
+            }
+            World world = null;
+            world = new World(theWorld, WorldProvider.getProviderForDimension(thePlayer.dimension));
+            changeWorld(world, "Entering the Nether", thePlayer);
+        } else
+        if(thePlayer.dimension == 0)
+        {
+            if(thePlayer.isEntityAlive())
+            {
+                thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+                theWorld.updateEntityWithOptionalForce(thePlayer, false);
+            }
+            World world1 = null;
+            world1 = new World(theWorld, WorldProvider.getProviderForDimension(thePlayer.dimension));
+            if(j == -1)
+            {
+                changeWorld(world1, "Leaving the Nether", thePlayer);
+            } else
+            {
+                changeWorld(world1, "Leaving the End", thePlayer);
+            }
+        } else
+        {
+            World world2 = null;
+            world2 = new World(theWorld, WorldProvider.getProviderForDimension(thePlayer.dimension));
+            ChunkCoordinates chunkcoordinates = world2.func_40472_j();
+            d = chunkcoordinates.posX;
+            thePlayer.posY = chunkcoordinates.posY;
+            d1 = chunkcoordinates.posZ;
+            thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, 90F, 0.0F);
+            if(thePlayer.isEntityAlive())
+            {
+                world2.updateEntityWithOptionalForce(thePlayer, false);
+            }
+            changeWorld(world2, "Entering the End", thePlayer);
+        }
+        thePlayer.worldObj = theWorld;
+        System.out.println((new StringBuilder()).append("Teleported to ").append(theWorld.worldProvider.worldType).toString());
+        if(thePlayer.isEntityAlive() && j < 1)
+        {
+            thePlayer.setLocationAndAngles(d, thePlayer.posY, d1, thePlayer.rotationYaw, thePlayer.rotationPitch);
+            theWorld.updateEntityWithOptionalForce(thePlayer, false);
+            (new Teleporter()).placeInPortal(theWorld, thePlayer);
+        }
+    }
+
+    public void func_40002_b(String s)
+    {
+        theWorld = null;
+        changeWorld2(null, s);
+    }
+
+    public void changeWorld1(World world)
+    {
+        changeWorld2(world, "");
+    }
+
+    public void changeWorld2(World world, String s)
+    {
+        changeWorld(world, s, null);
+    }
+
+    public void changeWorld(World world, String s, EntityPlayer entityplayer)
+    {
+        statFileWriter.func_27175_b();
+        statFileWriter.syncStats();
+        renderViewEntity = null;
+        if(loadingScreen != null)
+        {
+            loadingScreen.printText(s);
+            loadingScreen.displayLoadingString("");
+        }
+        sndManager.playStreaming(null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
+        if(theWorld != null)
+        {
+            theWorld.saveWorldIndirectly(loadingScreen);
+        }
+        theWorld = world;
+        if(world != null)
+        {
+            if(playerController != null)
+            {
+                playerController.onWorldChange(world);
+            }
+            if(!isMultiplayerWorld())
+            {
+                if(entityplayer == null)
+                {
+                    thePlayer = (EntityPlayerSP)world.func_4085_a(net.minecraft.src.EntityPlayerSP.class);
+                }
+            } else
+            if(thePlayer != null)
+            {
+                thePlayer.preparePlayerToSpawn();
+                if(world != null)
+                {
+                    world.entityJoinedWorld(thePlayer);
+                }
+            }
+            if(!world.multiplayerWorld)
+            {
+                preloadWorld(s);
+            }
+            if(thePlayer == null)
+            {
+                thePlayer = (EntityPlayerSP)playerController.createPlayer(world);
+                thePlayer.preparePlayerToSpawn();
+                playerController.flipPlayer(thePlayer);
+            }
+            thePlayer.movementInput = new MovementInputFromOptions(gameSettings);
+            if(renderGlobal != null)
+            {
+                renderGlobal.changeWorld(world);
+            }
+            if(effectRenderer != null)
+            {
+                effectRenderer.clearEffects(world);
+            }
+            if(entityplayer != null)
+            {
+                world.emptyMethod1();
+            }
+            net.minecraft.src.IChunkProvider ichunkprovider = world.getIChunkProvider();
+            if(ichunkprovider instanceof ChunkProviderLoadOrGenerate)
+            {
+                ChunkProviderLoadOrGenerate chunkproviderloadorgenerate = (ChunkProviderLoadOrGenerate)ichunkprovider;
+                int i = MathHelper.floor_float((int)thePlayer.posX) >> 4;
+                int j = MathHelper.floor_float((int)thePlayer.posZ) >> 4;
+                chunkproviderloadorgenerate.setCurrentChunkOver(i, j);
+            }
+            world.spawnPlayerWithLoadedChunks(thePlayer);
+            playerController.func_6473_b(thePlayer);
+            if(world.isNewWorld)
+            {
+                world.saveWorldIndirectly(loadingScreen);
+            }
+            renderViewEntity = thePlayer;
+        } else
+        {
+            saveLoader.flushCache();
+            thePlayer = null;
+        }
+        System.gc();
+        systemTime = 0L;
+    }
+
+    private void convertMapFormat(String s, String s1)
+    {
+        loadingScreen.printText((new StringBuilder()).append("Converting World to ").append(saveLoader.func_22178_a()).toString());
+        loadingScreen.displayLoadingString("This may take a while :)");
+        saveLoader.convertMapFormat(s, loadingScreen);
+        startWorld(s, s1, new WorldSettings(0L, 0, true, false));
+    }
+
+    private void preloadWorld(String s)
+    {
+        if(loadingScreen != null)
+        {
+            loadingScreen.printText(s);
+            loadingScreen.displayLoadingString("Building terrain");
+        }
+        char c = '\200';
+        if(playerController.func_35643_e())
+        {
+            c = '@';
+        }
+        int i = 0;
+        int j = (c * 2) / 16 + 1;
+        j *= j;
+        net.minecraft.src.IChunkProvider ichunkprovider = theWorld.getIChunkProvider();
+        ChunkCoordinates chunkcoordinates = theWorld.getSpawnPoint();
+        if(thePlayer != null)
+        {
+            chunkcoordinates.posX = (int)thePlayer.posX;
+            chunkcoordinates.posZ = (int)thePlayer.posZ;
+        }
+        if(ichunkprovider instanceof ChunkProviderLoadOrGenerate)
+        {
+            ChunkProviderLoadOrGenerate chunkproviderloadorgenerate = (ChunkProviderLoadOrGenerate)ichunkprovider;
+            chunkproviderloadorgenerate.setCurrentChunkOver(chunkcoordinates.posX >> 4, chunkcoordinates.posZ >> 4);
+        }
+        for(int k = -c; k <= c; k += 16)
+        {
+            for(int l = -c; l <= c; l += 16)
+            {
+                if(loadingScreen != null)
+                {
+                    loadingScreen.setLoadingProgress((i++ * 100) / j);
+                }
+                theWorld.getBlockId(chunkcoordinates.posX + k, 64, chunkcoordinates.posZ + l);
+                if(playerController.func_35643_e())
+                {
+                    continue;
+                }
+                while(theWorld.updatingLighting()) ;
+            }
+
+        }
+
+        if(!playerController.func_35643_e())
+        {
+            if(loadingScreen != null)
+            {
+                loadingScreen.displayLoadingString("Simulating world for a bit");
+            }
+            char c1 = '\u07D0';
+            theWorld.dropOldChunks();
+        }
+    }
+
+    public void installResource(String s, File file)
+    {
+        int i = s.indexOf("/");
+        String s1 = s.substring(0, i);
+        s = s.substring(i + 1);
+        if(s1.equalsIgnoreCase("sound"))
+        {
+            sndManager.addSound(s, file);
+        } else
+        if(s1.equalsIgnoreCase("newsound"))
+        {
+            sndManager.addSound(s, file);
+        } else
+        if(s1.equalsIgnoreCase("streaming"))
+        {
+            sndManager.addStreaming(s, file);
+        } else
+        if(s1.equalsIgnoreCase("music"))
+        {
+            sndManager.addMusic(s, file);
+        } else
+        if(s1.equalsIgnoreCase("newmusic"))
+        {
+            sndManager.addMusic(s, file);
+        }
+    }
+
+    public String debugInfoRenders()
+    {
+        return renderGlobal.getDebugInfoRenders();
+    }
+
+    public String func_6262_n()
+    {
+        return renderGlobal.getDebugInfoEntities();
+    }
+
+    public String func_21002_o()
+    {
+        return theWorld.func_21119_g();
+    }
+
+    public String debugInfoEntities()
+    {
+        return (new StringBuilder()).append("P: ").append(effectRenderer.getStatistics()).append(". T: ").append(theWorld.getDebugLoadedEntities()).toString();
+    }
+
+    public void respawn(boolean flag, int i, boolean flag1)
+    {
+        if(!theWorld.multiplayerWorld && !theWorld.worldProvider.canRespawnHere())
+        {
+            usePortal(0);
+        }
+        ChunkCoordinates chunkcoordinates = null;
+        ChunkCoordinates chunkcoordinates1 = null;
+        boolean flag2 = true;
+        if(thePlayer != null && !flag)
+        {
+            chunkcoordinates = thePlayer.getPlayerSpawnCoordinate();
+            if(chunkcoordinates != null)
+            {
+                chunkcoordinates1 = EntityPlayer.verifyRespawnCoordinates(theWorld, chunkcoordinates);
+                if(chunkcoordinates1 == null)
+                {
+                    thePlayer.addChatMessage("tile.bed.notValid");
+                }
+            }
+        }
+        if(chunkcoordinates1 == null)
+        {
+            chunkcoordinates1 = theWorld.getSpawnPoint();
+            flag2 = false;
+        }
+        net.minecraft.src.IChunkProvider ichunkprovider = theWorld.getIChunkProvider();
+        if(ichunkprovider instanceof ChunkProviderLoadOrGenerate)
+        {
+            ChunkProviderLoadOrGenerate chunkproviderloadorgenerate = (ChunkProviderLoadOrGenerate)ichunkprovider;
+            chunkproviderloadorgenerate.setCurrentChunkOver(chunkcoordinates1.posX >> 4, chunkcoordinates1.posZ >> 4);
+        }
+        theWorld.setSpawnLocation();
+        theWorld.updateEntityList();
+        int j = 0;
+        if(thePlayer != null)
+        {
+            j = thePlayer.entityId;
+            theWorld.setEntityDead(thePlayer);
+        }
+        EntityPlayerSP entityplayersp = thePlayer;
+        renderViewEntity = null;
+        thePlayer = (EntityPlayerSP)playerController.createPlayer(theWorld);
+        if(flag1)
+        {
+            thePlayer.func_41014_d(entityplayersp);
+        }
+        thePlayer.dimension = i;
+        renderViewEntity = thePlayer;
+        thePlayer.preparePlayerToSpawn();
+        if(flag2)
+        {
+            thePlayer.setPlayerSpawnCoordinate(chunkcoordinates);
+            thePlayer.setLocationAndAngles((float)chunkcoordinates1.posX + 0.5F, (float)chunkcoordinates1.posY + 0.1F, (float)chunkcoordinates1.posZ + 0.5F, 0.0F, 0.0F);
+        }
+        playerController.flipPlayer(thePlayer);
+        theWorld.spawnPlayerWithLoadedChunks(thePlayer);
+        thePlayer.movementInput = new MovementInputFromOptions(gameSettings);
+        thePlayer.entityId = j;
+        thePlayer.func_6420_o();
+        playerController.func_6473_b(thePlayer);
+        preloadWorld("Respawning");
+        if(currentScreen instanceof GuiGameOver)
+        {
+            displayGuiScreen(null);
+        }
+    }
+
+    public static void startMainThread1(String s, String s1)
+    {
+        startMainThread(s, s1, null);
+    }
+
+    public static void startMainThread(String s, String s1, String s2)
+    {
+        boolean flag = false;
+        String s3 = s;
+        Frame frame = new Frame("Minecraft");
+        Canvas canvas = new Canvas();
+        frame.setLayout(new BorderLayout());
+        frame.add(canvas, "Center");
+        canvas.setPreferredSize(new Dimension(854, 480));
+        frame.pack();
+        frame.setLocationRelativeTo(null);
+        MinecraftImpl minecraftimpl = new MinecraftImpl(frame, canvas, null, 854, 480, flag, frame);
+        Thread thread = new Thread(minecraftimpl, "Minecraft main thread");
+        thread.setPriority(10);
+        minecraftimpl.minecraftUri = "www.minecraft.net";
+        if(s3 != null && s1 != null)
+        {
+            minecraftimpl.session = new Session(s3, s1);
+        } else
+        {
+            minecraftimpl.session = new Session((new StringBuilder()).append("Player").append(System.currentTimeMillis() % 1000L).toString(), "");
+        }
+        if(s2 != null)
+        {
+            String as[] = s2.split(":");
+            minecraftimpl.setServer(as[0], Integer.parseInt(as[1]));
+        }
+        frame.setVisible(true);
+        frame.addWindowListener(new GameWindowListener(minecraftimpl, thread));
+        thread.start();
+    }
+
+    public NetClientHandler getSendQueue()
+    {
+        if(thePlayer instanceof EntityClientPlayerMP)
+        {
+            return ((EntityClientPlayerMP)thePlayer).sendQueue;
+        } else
+        {
+            return null;
+        }
+    }
+
+    public static void main(String args[])
+    {
+        String s = null;
+        String s1 = null;
+        s = (new StringBuilder()).append("Player").append(System.currentTimeMillis() % 1000L).toString();
+        if(args.length > 0)
+        {
+            s = args[0];
+        }
+        s1 = "-";
+        if(args.length > 1)
+        {
+            s1 = args[1];
+        }
+        startMainThread1(s, s1);
+    }
+
+    public static boolean isGuiEnabled()
+    {
+        return theMinecraft == null || !theMinecraft.gameSettings.hideGUI;
+    }
+
+    public static boolean isFancyGraphicsEnabled()
+    {
+        return theMinecraft != null && theMinecraft.gameSettings.fancyGraphics;
+    }
+
+    public static boolean isAmbientOcclusionEnabled()
+    {
+        return theMinecraft != null && theMinecraft.gameSettings.ambientOcclusion;
+    }
+
+    public static boolean isDebugInfoEnabled()
+    {
+        return theMinecraft != null && theMinecraft.gameSettings.showDebugInfo;
+    }
+
+    public boolean lineIsCommand(String s)
+    {
+        if(!s.startsWith("/"));
+        return false;
+    }
+
+    private void clickMiddleMouseButton()
+    {
+        if(objectMouseOver != null)
+        {
+            int i = theWorld.getBlockId(objectMouseOver.blockX, objectMouseOver.blockY, objectMouseOver.blockZ);
+            if(i == Block.grass.blockID)
+            {
+                i = Block.dirt.blockID;
+            }
+            if(i == Block.stairDouble.blockID)
+            {
+                i = Block.stairSingle.blockID;
+            }
+            if(i == Block.bedrock.blockID)
+            {
+                i = Block.stone.blockID;
+            }
+            int j = 0;
+            boolean flag = false;
+            if(Item.itemsList[i].getHasSubtypes())
+            {
+                j = theWorld.getBlockMetadata(objectMouseOver.blockX, objectMouseOver.blockY, objectMouseOver.blockZ);
+                flag = true;
+            }
+            thePlayer.inventory.setCurrentItem(i, j, flag, playerController instanceof PlayerControllerCreative);
+        }
+    }
+
+}
diff -ruN src/minecraft/net/minecraft/src/BlockBrewingStand.java newsrc/minecraft/net/minecraft/src/BlockBrewingStand.java
--- src/minecraft/net/minecraft/src/BlockBrewingStand.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/BlockBrewingStand.java	2021-01-01 00:00:00.000000000 +0100
@@ -20,7 +20,7 @@
     public BlockBrewingStand(int i)
     {
         super(i, Material.iron);
-        field_40214_a = new Random();
+        field_40214_a = new net.tasmod.rng.FakeRandom();
         blockIndexInTexture = 157;
     }
 
diff -ruN src/minecraft/net/minecraft/src/BlockChest.java newsrc/minecraft/net/minecraft/src/BlockChest.java
--- src/minecraft/net/minecraft/src/BlockChest.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/BlockChest.java	2021-01-01 00:00:00.000000000 +0100
@@ -20,7 +20,7 @@
     protected BlockChest(int i)
     {
         super(i, Material.wood);
-        random = new Random();
+        random = new net.tasmod.rng.FakeRandom();
         blockIndexInTexture = 26;
     }
 
diff -ruN src/minecraft/net/minecraft/src/BlockDispenser.java newsrc/minecraft/net/minecraft/src/BlockDispenser.java
--- src/minecraft/net/minecraft/src/BlockDispenser.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/BlockDispenser.java	2021-01-01 00:00:00.000000000 +0100
@@ -21,7 +21,7 @@
     protected BlockDispenser(int i)
     {
         super(i, Material.rock);
-        random = new Random();
+        random = new net.tasmod.rng.FakeRandom();
         blockIndexInTexture = 45;
     }
 
diff -ruN src/minecraft/net/minecraft/src/BlockFurnace.java newsrc/minecraft/net/minecraft/src/BlockFurnace.java
--- src/minecraft/net/minecraft/src/BlockFurnace.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/BlockFurnace.java	2021-01-01 00:00:00.000000000 +0100
@@ -22,7 +22,7 @@
     protected BlockFurnace(int i, boolean flag)
     {
         super(i, Material.rock);
-        furnaceRand = new Random();
+        furnaceRand = new net.tasmod.rng.FakeRandom();
         isActive = flag;
         blockIndexInTexture = 45;
     }
diff -ruN src/minecraft/net/minecraft/src/ChunkProviderGenerate.java newsrc/minecraft/net/minecraft/src/ChunkProviderGenerate.java
--- src/minecraft/net/minecraft/src/ChunkProviderGenerate.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/ChunkProviderGenerate.java	2021-01-01 00:00:00.000000000 +0100
@@ -56,7 +56,7 @@
         unusedIntArray32x32 = new int[32][32];
         worldObj = world;
         mapFeaturesEnabled = flag;
-        rand = new Random(l);
+        rand = new net.tasmod.rng.DecoratorRng(l);
         noiseGen1 = new NoiseGeneratorOctaves(rand, 16);
         noiseGen2 = new NoiseGeneratorOctaves(rand, 16);
         noiseGen3 = new NoiseGeneratorOctaves(rand, 8);
diff -ruN src/minecraft/net/minecraft/src/ComponentNetherBridgeEntrance.java newsrc/minecraft/net/minecraft/src/ComponentNetherBridgeEntrance.java
--- src/minecraft/net/minecraft/src/ComponentNetherBridgeEntrance.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/ComponentNetherBridgeEntrance.java	2021-01-01 00:00:00.000000000 +0100
@@ -7,6 +7,8 @@
 import java.util.List;
 import java.util.Random;
 
+import net.tasmod.rng.FakeRandom;
+
 // Referenced classes of package net.minecraft.src:
 //            ComponentNetherBridgePiece, ComponentNetherBridgeStartPiece, StructureBoundingBox, StructureComponent, 
 //            Block, World
@@ -114,7 +116,7 @@
         if(structureboundingbox.isVecInside(i1, l1, i2))
         {
             world.scheduledUpdatesAreImmediate = true;
-            Block.blocksList[Block.lavaMoving.blockID].updateTick(world, i1, l1, i2, random);
+            Block.blocksList[Block.lavaMoving.blockID].updateTick(world, i1, l1, i2, new FakeRandom()); // Lava is being updated using the wrong RNG
             world.scheduledUpdatesAreImmediate = false;
         }
         return true;
diff -ruN src/minecraft/net/minecraft/src/ContainerEnchantment.java newsrc/minecraft/net/minecraft/src/ContainerEnchantment.java
--- src/minecraft/net/minecraft/src/ContainerEnchantment.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/ContainerEnchantment.java	2021-01-01 00:00:00.000000000 +0100
@@ -27,7 +27,7 @@
     public ContainerEnchantment(InventoryPlayer inventoryplayer, World world, int i, int j, int k)
     {
         field_40236_a = new SlotEnchantmentTable(this, "Enchant", 1);
-        field_40237_l = new Random();
+        field_40237_l = new net.tasmod.rng.FakeRandom();
         field_40235_c = new int[3];
         field_40240_h = world;
         field_40241_i = i;
diff -ruN src/minecraft/net/minecraft/src/EffectRenderer.java newsrc/minecraft/net/minecraft/src/EffectRenderer.java
--- src/minecraft/net/minecraft/src/EffectRenderer.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/EffectRenderer.java	2021-01-01 00:00:00.000000000 +0100
@@ -6,7 +6,6 @@
 
 import java.util.*;
 import org.lwjgl.opengl.GL11;
-
 // Referenced classes of package net.minecraft.src:
 //            EntityFX, ActiveRenderInfo, Entity, RenderEngine, 
 //            Tessellator, MathHelper, Block, EntityDiggingFX, 
@@ -23,7 +22,7 @@
     public EffectRenderer(World world, RenderEngine renderengine)
     {
         fxLayers = new List[4];
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         if(world != null)
         {
             worldObj = world;
diff -ruN src/minecraft/net/minecraft/src/EnchantmentHelper.java newsrc/minecraft/net/minecraft/src/EnchantmentHelper.java
--- src/minecraft/net/minecraft/src/EnchantmentHelper.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/EnchantmentHelper.java	2021-01-01 00:00:00.000000000 +0100
@@ -15,7 +15,7 @@
 public class EnchantmentHelper
 {
 
-    private static final Random enchantmentRand = new Random();
+    private static final Random enchantmentRand = new net.tasmod.rng.FakeRandom();
     private static final EnchantmentModifierDamage enchantmentModifierDamage = new EnchantmentModifierDamage(null);
     private static final EnchantmentModifierLiving enchantmentModifierLiving = new EnchantmentModifierLiving(null);
 
diff -ruN src/minecraft/net/minecraft/src/EnchantmentNameParts.java newsrc/minecraft/net/minecraft/src/EnchantmentNameParts.java
--- src/minecraft/net/minecraft/src/EnchantmentNameParts.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/EnchantmentNameParts.java	2021-01-01 00:00:00.000000000 +0100
@@ -15,7 +15,7 @@
 
     private EnchantmentNameParts()
     {
-        field_40251_b = new Random();
+        field_40251_b = new net.tasmod.rng.FakeRandom();
         field_40252_c = "the elder scrolls klaatu berata niktu xyzzy bless curse light darkness fire air earth water hot dry cold wet ignite snuff embiggen twist shorten stretch fiddle destroy imbue galvanize enchant free limited range of towards inside sphere cube self other ball mental physical grow shrink demon elemental spirit animal creature beast humanoid undead fresh stale ".split(" ");
     }
 
diff -ruN src/minecraft/net/minecraft/src/Entity.java newsrc/minecraft/net/minecraft/src/Entity.java
--- src/minecraft/net/minecraft/src/Entity.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/Entity.java	2021-01-01 00:00:00.000000000 +0100
@@ -105,7 +105,7 @@
         stepHeight = 0.0F;
         noClip = false;
         entityCollisionReduction = 0.0F;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         ticksExisted = 0;
         fireResistance = 1;
         fire = 0;
diff -ruN src/minecraft/net/minecraft/src/EntityRenderer.java newsrc/minecraft/net/minecraft/src/EntityRenderer.java
--- src/minecraft/net/minecraft/src/EntityRenderer.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/EntityRenderer.java	2021-01-01 00:00:00.000000000 +0100
@@ -8,6 +8,8 @@
 import java.nio.FloatBuffer;
 import java.util.Random;
 import net.minecraft.client.Minecraft;
+import net.tasmod.rng.FakeRandom;
+
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.ContextCapabilities;
 import org.lwjgl.opengl.Display;
@@ -120,7 +122,7 @@
         torchFlickerDX = 0.0F;
         torchFlickerY = 0.0F;
         torchFlickerDY = 0.0F;
-        random = new Random();
+        random = new FakeRandom();
         rainSoundCounter = 0;
         unusedVolatile0 = 0;
         unusedVolatile1 = 0;
@@ -396,8 +398,8 @@
         }
         if(!mc.gameSettings.debugCamEnable)
         {
-            GL11.glRotatef(entityliving.prevRotationPitch + (entityliving.rotationPitch - entityliving.prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
-            GL11.glRotatef(entityliving.prevRotationYaw + (entityliving.rotationYaw - entityliving.prevRotationYaw) * f + 180F, 0.0F, 1.0F, 0.0F);
+            GL11.glRotatef(net.tasmod.Utils.prevRotationPitch + (net.tasmod.Utils.rotationPitch - net.tasmod.Utils.prevRotationPitch) * f, 1.0F, 0.0F, 0.0F);
+            GL11.glRotatef(net.tasmod.Utils.prevRotationYaw + (net.tasmod.Utils.rotationYaw - net.tasmod.Utils.prevRotationYaw) * f + 180F, 0.0F, 1.0F, 0.0F);
         }
         GL11.glTranslatef(0.0F, f1, 0.0F);
         d = entityliving.prevPosX + (entityliving.posX - entityliving.prevPosX) * (double)f;
@@ -692,29 +694,15 @@
         Profiler.startSection("mouse");
         if(mc.inGameHasFocus)
         {
-            mc.mouseHelper.mouseXYChange();
-            float f1 = mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
-            float f2 = f1 * f1 * f1 * 8F;
-            float f3 = (float)mc.mouseHelper.deltaX * f2;
-            float f4 = (float)mc.mouseHelper.deltaY * f2;
-            int l = 1;
-            if(mc.gameSettings.invertMouse)
-            {
-                l = -1;
-            }
-            if(mc.gameSettings.smoothCamera)
-            {
-                smoothCamYaw += f3;
-                smoothCamPitch += f4;
-                float f5 = f - smoothCamPartialTicks;
-                smoothCamPartialTicks = f;
-                f3 = smoothCamFilterX * f5;
-                f4 = smoothCamFilterY * f5;
-                mc.thePlayer.setAngles(f3, f4 * (float)l);
-            } else
-            {
-                mc.thePlayer.setAngles(f3, f4 * (float)l);
-            }
+        	float f1 = mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
+			float f2 = f1 * f1 * f1 * 8F;
+
+            int dx = Mouse.getDX();
+            int dy = Mouse.getDY();
+            net.tasmod.Utils.dX += dx;
+            net.tasmod.Utils.dY += dy;
+            
+            net.tasmod.Utils.setAngles(dx * f2, dy * f2);
         }
         Profiler.endSection();
         if(mc.skipRenderWorld)
@@ -725,8 +713,8 @@
         ScaledResolution scaledresolution = new ScaledResolution(mc.gameSettings, mc.displayWidth, mc.displayHeight);
         int i = scaledresolution.getScaledWidth();
         int j = scaledresolution.getScaledHeight();
-        int k = (Mouse.getX() * i) / mc.displayWidth;
-        int i1 = j - (Mouse.getY() * j) / mc.displayHeight - 1;
+        int k = (net.tasmod.virtual.VirtualMouse.getX() * i) / mc.displayWidth;
+        int i1 = j - (net.tasmod.virtual.VirtualMouse.getY() * j) / mc.displayHeight - 1;
         char c = '\310';
         if(mc.gameSettings.limitFramerate == 1)
         {
diff -ruN src/minecraft/net/minecraft/src/Explosion.java newsrc/minecraft/net/minecraft/src/Explosion.java
--- src/minecraft/net/minecraft/src/Explosion.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/Explosion.java	2021-01-01 00:00:00.000000000 +0100
@@ -27,7 +27,7 @@
     public Explosion(World world, Entity entity, double d, double d1, double d2, float f)
     {
         isFlaming = false;
-        ExplosionRNG = new Random();
+        ExplosionRNG = new net.tasmod.rng.FakeRandom();
         destroyedBlockPositions = new HashSet();
         worldObj = world;
         exploder = entity;
diff -ruN src/minecraft/net/minecraft/src/FontRenderer.java newsrc/minecraft/net/minecraft/src/FontRenderer.java
--- src/minecraft/net/minecraft/src/FontRenderer.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/FontRenderer.java	2021-01-01 00:00:00.000000000 +0100
@@ -31,7 +31,7 @@
         fontTextureName = 0;
         field_41063_b = 8;
         buffer = GLAllocation.createDirectIntBuffer(1024 /*GL_FRONT_LEFT*/);
-        field_41064_c = new Random();
+        field_41064_c = new net.tasmod.rng.FakeRandom();
         BufferedImage bufferedimage;
         try
         {
diff -ruN src/minecraft/net/minecraft/src/GameSettings.java newsrc/minecraft/net/minecraft/src/GameSettings.java
--- src/minecraft/net/minecraft/src/GameSettings.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GameSettings.java	2021-01-01 00:00:00.000000000 +0100
@@ -194,7 +194,7 @@
             });
         } else
         {
-            return Keyboard.getKeyName(i);
+            return net.tasmod.virtual.VirtualKeyboard.getKeyName(i);
         }
     }
 
diff -ruN src/minecraft/net/minecraft/src/GuiAchievements.java newsrc/minecraft/net/minecraft/src/GuiAchievements.java
--- src/minecraft/net/minecraft/src/GuiAchievements.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiAchievements.java	2021-01-01 00:00:00.000000000 +0100
@@ -80,7 +80,7 @@
 
     public void drawScreen(int i, int j, float f)
     {
-        if(Mouse.isButtonDown(0))
+        if(net.tasmod.virtual.VirtualMouse.isButtonDown(0))
         {
             int k = (width - achievementsPaneWidth) / 2;
             int l = (height - achievementsPaneHeight) / 2;
diff -ruN src/minecraft/net/minecraft/src/GuiContainer.java newsrc/minecraft/net/minecraft/src/GuiContainer.java
--- src/minecraft/net/minecraft/src/GuiContainer.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiContainer.java	2021-01-01 00:00:00.000000000 +0100
@@ -250,7 +250,7 @@
             }
             if(j1 != -1)
             {
-                boolean flag1 = j1 != -999 && (Keyboard.isKeyDown(42) || Keyboard.isKeyDown(54));
+                boolean flag1 = j1 != -999 && (net.tasmod.virtual.VirtualKeyboard.isKeyDown(42) || net.tasmod.virtual.VirtualKeyboard.isKeyDown(54));
                 func_35309_a(slot, j1, k, flag1);
             }
         }
diff -ruN src/minecraft/net/minecraft/src/GuiContainerCreative.java newsrc/minecraft/net/minecraft/src/GuiContainerCreative.java
--- src/minecraft/net/minecraft/src/GuiContainerCreative.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiContainerCreative.java	2021-01-01 00:00:00.000000000 +0100
@@ -141,7 +141,7 @@
     public void handleMouseInput()
     {
         super.handleMouseInput();
-        int i = Mouse.getEventDWheel();
+        int i = net.tasmod.virtual.VirtualMouse.getEventDWheel();
         if(i != 0)
         {
             int j = (((ContainerCreative)inventorySlots).itemList.size() / 8 - 8) + 1;
@@ -168,7 +168,7 @@
 
     public void drawScreen(int i, int j, float f)
     {
-        boolean flag = Mouse.isButtonDown(0);
+        boolean flag = net.tasmod.virtual.VirtualMouse.isButtonDown(0);
         int k = field_40216_e;
         int l = field_40215_f;
         int i1 = k + 155;
diff -ruN src/minecraft/net/minecraft/src/GuiCreateWorld.java newsrc/minecraft/net/minecraft/src/GuiCreateWorld.java
--- src/minecraft/net/minecraft/src/GuiCreateWorld.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiCreateWorld.java	2021-01-01 00:00:00.000000000 +0100
@@ -56,7 +56,7 @@
         StringTranslate stringtranslate = StringTranslate.getInstance();
         Keyboard.enableRepeatEvents(true);
         controlList.clear();
-        controlList.add(new GuiButton(0, width / 2 - 155, height - 28, 150, 20, stringtranslate.translateKey("selectWorld.create")));
+        controlList.add(new GuiButton(0, width / 2 - 155, height - 28, 150, 20, stringtranslate.translateKey("Create and record World")));
         controlList.add(new GuiButton(1, width / 2 + 5, height - 28, 150, 20, stringtranslate.translateKey("gui.cancel")));
         controlList.add(field_35366_j = new GuiButton(2, width / 2 - 75, 100, 150, 20, stringtranslate.translateKey("selectWorld.gameMode")));
         controlList.add(field_35367_k = new GuiButton(3, width / 2 - 75, 172, 150, 20, stringtranslate.translateKey("selectWorld.moreWorldOptions")));
@@ -140,7 +140,7 @@
                 return;
             }
             createClicked = true;
-            long l = (new Random()).nextLong();
+            long l = (new net.tasmod.rng.FakeRandom()).nextLong();
             String s = textboxSeed.getText();
             if(!MathHelper.stringNullOrLengthZero(s))
             {
@@ -157,17 +157,11 @@
                     l = s.hashCode();
                 }
             }
-            int i = 0;
-            if(field_35364_f.equals("creative"))
-            {
-                i = 1;
-                mc.playerController = new PlayerControllerCreative(mc);
-            } else
-            {
-                mc.playerController = new PlayerControllerSP(mc);
-            }
-            mc.startWorld(folderName, textboxWorldName.getText(), new WorldSettings(l, i, field_35365_g, field_40232_h));
-            mc.displayGuiScreen(null);
+            try {
+				net.tasmod.TASmod.startRecording(l, field_35364_f.equals("creative") ? 1 : 0, field_40232_h, field_35365_g, folderName, textboxWorldName.getText());
+			} catch (java.io.IOException e) {
+				e.printStackTrace();
+			}
         } else
         if(guibutton.id == 3)
         {
diff -ruN src/minecraft/net/minecraft/src/GuiEditSign.java newsrc/minecraft/net/minecraft/src/GuiEditSign.java
--- src/minecraft/net/minecraft/src/GuiEditSign.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiEditSign.java	2021-01-01 00:00:00.000000000 +0100
@@ -33,13 +33,13 @@
     public void initGui()
     {
         controlList.clear();
-        Keyboard.enableRepeatEvents(true);
+        net.tasmod.virtual.VirtualKeyboard.enableRepeatEvents(true);
         controlList.add(new GuiButton(0, width / 2 - 100, height / 4 + 120, "Done"));
     }
 
     public void onGuiClosed()
     {
-        Keyboard.enableRepeatEvents(false);
+    	net.tasmod.virtual.VirtualKeyboard.enableRepeatEvents(false);
         if(mc.theWorld.multiplayerWorld)
         {
             mc.getSendQueue().addToSendQueue(new Packet130UpdateSign(entitySign.xCoord, entitySign.yCoord, entitySign.zCoord, entitySign.signText));
diff -ruN src/minecraft/net/minecraft/src/GuiEnchantment.java newsrc/minecraft/net/minecraft/src/GuiEnchantment.java
--- src/minecraft/net/minecraft/src/GuiEnchantment.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiEnchantment.java	2021-01-01 00:00:00.000000000 +0100
@@ -33,7 +33,7 @@
     public GuiEnchantment(InventoryPlayer inventoryplayer, World world, int i, int j, int k)
     {
         super(new ContainerEnchantment(inventoryplayer, world, i, j, k));
-        field_40230_x = new Random();
+        field_40230_x = new net.tasmod.rng.FakeRandom();
         field_40228_y = (ContainerEnchantment)inventorySlots;
     }
 
diff -ruN src/minecraft/net/minecraft/src/GuiIngame.java newsrc/minecraft/net/minecraft/src/GuiIngame.java
--- src/minecraft/net/minecraft/src/GuiIngame.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiIngame.java	2021-01-01 00:00:00.000000000 +0100
@@ -76,6 +76,14 @@
                 renderPortalOverlay(f1, k, l);
             }
         }
+        // Pancake: Draw Text here
+        //#DEV: Add Desync Tool
+        if (net.tasmod.TASmod.isPlayback()) {
+        	drawString(mc.fontRenderer, net.tasmod.TASmod.getPlayback().desync, 1, 1, 0xFFFFFF);
+        	drawString(mc.fontRenderer, net.tasmod.TASmod.getPlayback().desync_2, 1, 12, 0xFFFFFF);
+        	drawString(mc.fontRenderer, net.tasmod.TASmod.getPlayback().desync_3, 1, 24, 0xFFFFFF);
+        }
+        //#ENDDEV
         if(!mc.playerController.func_35643_e())
         {
             GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
diff -ruN src/minecraft/net/minecraft/src/GuiMainMenu.java newsrc/minecraft/net/minecraft/src/GuiMainMenu.java
--- src/minecraft/net/minecraft/src/GuiMainMenu.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiMainMenu.java	2021-01-01 00:00:00.000000000 +0100
@@ -24,7 +24,7 @@
 public class GuiMainMenu extends GuiScreen
 {
 
-    private static final Random rand = new Random();
+    private static final Random rand = new net.tasmod.rng.FakeRandom();
     private float updateCounter;
     private String splashText;
     private GuiButton multiplayerButton;
@@ -100,8 +100,9 @@
         }
         StringTranslate stringtranslate = StringTranslate.getInstance();
         int i = height / 4 + 48;
-        controlList.add(new GuiButton(1, width / 2 - 100, i, stringtranslate.translateKey("menu.singleplayer")));
-        controlList.add(multiplayerButton = new GuiButton(2, width / 2 - 100, i + 24, stringtranslate.translateKey("menu.multiplayer")));
+        // TODO: There has got to be a way around this
+        controlList.add(new GuiButton(1, width / 2 - 100, i, stringtranslate.translateKey("Record TAS")));
+        controlList.add(multiplayerButton = new GuiButton(2, width / 2 - 100, i + 24, stringtranslate.translateKey("Playback TAS")));
         controlList.add(new GuiButton(3, width / 2 - 100, i + 48, stringtranslate.translateKey("menu.mods")));
         if(mc.hideQuitButton)
         {
diff -ruN src/minecraft/net/minecraft/src/GuiMultiplayer.java newsrc/minecraft/net/minecraft/src/GuiMultiplayer.java
--- src/minecraft/net/minecraft/src/GuiMultiplayer.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiMultiplayer.java	2021-01-01 00:00:00.000000000 +0100
@@ -65,21 +65,37 @@
 
     private void loadServerList()
     {
-        try
-        {
-            NBTTagCompound nbttagcompound = CompressedStreamTools.func_35622_a(new File(mc.mcDataDir, "servers.dat"));
-            NBTTagList nbttaglist = nbttagcompound.getTagList("servers");
-            serverList.clear();
-            for(int i = 0; i < nbttaglist.tagCount(); i++)
-            {
-                serverList.add(ServerNBTStorage.createServerNBTStorage((NBTTagCompound)nbttaglist.tagAt(i)));
-            }
+    	for (File f : mc.mcDataDir.listFiles(new FilenameFilter() {
 
+    		@Override
+    		public boolean accept(File dir, String name) {
+    			return name.toLowerCase().endsWith(".tas");
+    		}
+    	})) {
+    		try {
+    			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
+
+    			reader.readLine();
+    			reader.readLine();
+
+    			ServerNBTStorage storage = new ServerNBTStorage(f.getName().split(".tas")[0], Long.parseLong(reader.readLine().split(": ")[1].split(" ")[0]) + "");
+
+    			boolean hardcore = Boolean.parseBoolean(reader.readLine().split(": ")[1].split(" ")[0]);
+    			boolean mapFeatures = Boolean.parseBoolean(reader.readLine().split(": ")[1].split(" ")[0]);
+    			int worldtype = Integer.parseInt(reader.readLine().split(": ")[1].split(" ")[0]);
+    			reader.close();
+
+    			storage.motd = (worldtype == 1 ? "Creative, " : (hardcore ? "Hardcore, " : "Survival, ")) + (mapFeatures ? "with Structures" : "without Structures");
+    			storage.lag = 420691337L;
+    			storage.playerCount = f.getName();
+    			storage.polled = true;
+    			serverList.add(storage);
         }
         catch(Exception exception)
         {
             exception.printStackTrace();
         }
+    	}
     }
 
     private void saveServerList()
@@ -106,11 +122,11 @@
     {
         StringTranslate stringtranslate = StringTranslate.getInstance();
         controlList.add(buttonEdit = new GuiButton(7, width / 2 - 154, height - 28, 70, 20, stringtranslate.translateKey("selectServer.edit")));
-        controlList.add(buttonDelete = new GuiButton(2, width / 2 - 74, height - 28, 70, 20, stringtranslate.translateKey("selectServer.delete")));
-        controlList.add(buttonSelect = new GuiButton(1, width / 2 - 154, height - 52, 100, 20, stringtranslate.translateKey("selectServer.select")));
-        controlList.add(new GuiButton(4, width / 2 - 50, height - 52, 100, 20, stringtranslate.translateKey("selectServer.direct")));
-        controlList.add(new GuiButton(3, width / 2 + 4 + 50, height - 52, 100, 20, stringtranslate.translateKey("selectServer.add")));
-        controlList.add(new GuiButton(8, width / 2 + 4, height - 28, 70, 20, stringtranslate.translateKey("selectServer.refresh")));
+        controlList.add(buttonDelete = new GuiButton(2, width / 2 + 5, height - 28, 70, 20, stringtranslate.translateKey("Delete")));
+        controlList.add(buttonSelect = new GuiButton(1, width / 2 - 154, height - 52, 308, 20, stringtranslate.translateKey("Playback")));
+        controlList.add(new GuiButton(7, width / 2 - 154, height - 28, 154, 20, stringtranslate.translateKey("Edit Playback")));
+        ((GuiButton) controlList.get(controlList.size() - 1)).enabled = false;
+		buttonEdit.drawButton = false;
         controlList.add(new GuiButton(0, width / 2 + 4 + 76, height - 28, 75, 20, stringtranslate.translateKey("gui.cancel")));
         boolean flag = selectedServer >= 0 && selectedServer < serverSlotContainer.getSize();
         buttonSelect.enabled = flag;
@@ -131,22 +147,16 @@
         }
         if(guibutton.id == 2)
         {
-            String s = ((ServerNBTStorage)serverList.get(selectedServer)).name;
-            if(s != null)
-            {
-                deleteClicked = true;
-                StringTranslate stringtranslate = StringTranslate.getInstance();
-                String s1 = stringtranslate.translateKey("selectServer.deleteQuestion");
-                String s2 = (new StringBuilder()).append("'").append(s).append("' ").append(stringtranslate.translateKey("selectServer.deleteWarning")).toString();
-                String s3 = stringtranslate.translateKey("selectServer.deleteButton");
-                String s4 = stringtranslate.translateKey("gui.cancel");
-                GuiYesNo guiyesno = new GuiYesNo(this, s1, s2, s3, s4, selectedServer);
-                mc.displayGuiScreen(guiyesno);
-            }
+        	new File(mc.mcDataDir, ((ServerNBTStorage) serverList.get(selectedServer)).playerCount).delete();
+        	mc.displayGuiScreen(new GuiMultiplayer(parentScreen));
         } else
         if(guibutton.id == 1)
         {
-            joinServer(selectedServer);
+        	try {
+    			net.tasmod.TASmod.startPlayback(((ServerNBTStorage) serverList.get(selectedServer)).playerCount.split(".tas")[0]);
+    		} catch (IOException e) {
+    			e.printStackTrace();
+    		}
         } else
         if(guibutton.id == 4)
         {
@@ -255,7 +265,8 @@
         StringTranslate stringtranslate = StringTranslate.getInstance();
         drawDefaultBackground();
         serverSlotContainer.drawScreen(i, j, f);
-        drawCenteredString(fontRenderer, stringtranslate.translateKey("multiplayer.title"), width / 2, 20, 0xffffff);
+        // TODO: Lang File
+        drawCenteredString(fontRenderer, stringtranslate.translateKey("Playback or Edit TAS"), width / 2, 20, 0xffffff);
         super.drawScreen(i, j, f);
         if(field_35350_v != null)
         {
diff -ruN src/minecraft/net/minecraft/src/GuiScreen.java newsrc/minecraft/net/minecraft/src/GuiScreen.java
--- src/minecraft/net/minecraft/src/GuiScreen.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiScreen.java	2021-01-01 00:00:00.000000000 +0100
@@ -116,35 +116,35 @@
 
     public void handleInput()
     {
-        for(; Mouse.next(); handleMouseInput()) { }
-        for(; Keyboard.next(); handleKeyboardInput()) { }
+        for(; net.tasmod.virtual.VirtualMouse.next(); handleMouseInput()) { }
+        for(; net.tasmod.virtual.VirtualKeyboard.next(); handleKeyboardInput()) { }
     }
 
     public void handleMouseInput()
     {
-        if(Mouse.getEventButtonState())
+        if(net.tasmod.virtual.VirtualMouse.getEventButtonState())
         {
-            int i = (Mouse.getEventX() * width) / mc.displayWidth;
-            int k = height - (Mouse.getEventY() * height) / mc.displayHeight - 1;
-            mouseClicked(i, k, Mouse.getEventButton());
+            int i = (net.tasmod.virtual.VirtualMouse.getEventX() * width) / mc.displayWidth;
+            int k = height - (net.tasmod.virtual.VirtualMouse.getEventY() * height) / mc.displayHeight - 1;
+            mouseClicked(i, k, net.tasmod.virtual.VirtualMouse.getEventButton());
         } else
         {
-            int j = (Mouse.getEventX() * width) / mc.displayWidth;
-            int l = height - (Mouse.getEventY() * height) / mc.displayHeight - 1;
-            mouseMovedOrUp(j, l, Mouse.getEventButton());
+            int j = (net.tasmod.virtual.VirtualMouse.getEventX() * width) / mc.displayWidth;
+            int l = height - (net.tasmod.virtual.VirtualMouse.getEventY() * height) / mc.displayHeight - 1;
+            mouseMovedOrUp(j, l, net.tasmod.virtual.VirtualMouse.getEventButton());
         }
     }
 
     public void handleKeyboardInput()
     {
-        if(Keyboard.getEventKeyState())
+        if(net.tasmod.virtual.VirtualKeyboard.getEventKeyState())
         {
-            if(Keyboard.getEventKey() == 87)
+            if(net.tasmod.virtual.VirtualKeyboard.getEventKey() == 87)
             {
                 mc.toggleFullscreen();
                 return;
             }
-            keyTyped(Keyboard.getEventCharacter(), Keyboard.getEventKey());
+            keyTyped(net.tasmod.virtual.VirtualKeyboard.getEventCharacter(), net.tasmod.virtual.VirtualKeyboard.getEventKey());
         }
     }
 
diff -ruN src/minecraft/net/minecraft/src/GuiSleepMP.java newsrc/minecraft/net/minecraft/src/GuiSleepMP.java
--- src/minecraft/net/minecraft/src/GuiSleepMP.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiSleepMP.java	2021-01-01 00:00:00.000000000 +0100
@@ -21,14 +21,14 @@
 
     public void initGui()
     {
-        Keyboard.enableRepeatEvents(true);
+    	net.tasmod.virtual.VirtualKeyboard.enableRepeatEvents(true);
         StringTranslate stringtranslate = StringTranslate.getInstance();
         controlList.add(new GuiButton(1, width / 2 - 100, height - 40, stringtranslate.translateKey("multiplayer.stopSleeping")));
     }
 
     public void onGuiClosed()
     {
-        Keyboard.enableRepeatEvents(false);
+    	net.tasmod.virtual.VirtualKeyboard.enableRepeatEvents(false);
     }
 
     protected void keyTyped(char c, int i)
diff -ruN src/minecraft/net/minecraft/src/GuiSlot.java newsrc/minecraft/net/minecraft/src/GuiSlot.java
--- src/minecraft/net/minecraft/src/GuiSlot.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiSlot.java	2021-01-01 00:00:00.000000000 +0100
@@ -159,7 +159,7 @@
         int k = getSize();
         int l = width / 2 + 124;
         int i1 = l + 6;
-        if(Mouse.isButtonDown(0))
+        if(net.tasmod.virtual.VirtualMouse.isButtonDown(0))
         {
             if(initialClickY == -1F)
             {
@@ -225,11 +225,11 @@
         {
             do
             {
-                if(!Mouse.next())
+                if(!net.tasmod.virtual.VirtualMouse.next())
                 {
                     break;
                 }
-                int j1 = Mouse.getEventDWheel();
+                int j1 = net.tasmod.virtual.VirtualMouse.getEventDWheel();
                 if(j1 != 0)
                 {
                     if(j1 > 0)
diff -ruN src/minecraft/net/minecraft/src/GuiSlotStats.java newsrc/minecraft/net/minecraft/src/GuiSlotStats.java
--- src/minecraft/net/minecraft/src/GuiSlotStats.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/GuiSlotStats.java	2021-01-01 00:00:00.000000000 +0100
@@ -50,7 +50,7 @@
 
     protected void func_27260_a(int i, int j, Tessellator tessellator)
     {
-        if(!Mouse.isButtonDown(0))
+        if(!net.tasmod.virtual.VirtualMouse.isButtonDown(0))
         {
             field_27268_b = -1;
         }
diff -ruN src/minecraft/net/minecraft/src/Item.java newsrc/minecraft/net/minecraft/src/Item.java
--- src/minecraft/net/minecraft/src/Item.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/Item.java	2021-01-01 00:00:00.000000000 +0100
@@ -27,7 +27,7 @@
 public class Item
 {
 
-    protected static Random itemRand = new Random();
+    protected static Random itemRand = new net.tasmod.rng.FakeRandom();
     public static Item itemsList[] = new Item[32000];
     public static Item shovelSteel;
     public static Item pickaxeSteel;
diff -ruN src/minecraft/net/minecraft/src/MapGenVillage.java newsrc/minecraft/net/minecraft/src/MapGenVillage.java
--- src/minecraft/net/minecraft/src/MapGenVillage.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/MapGenVillage.java	2021-01-01 00:00:00.000000000 +0100
@@ -35,7 +35,7 @@
         }
         int i1 = i / byte0;
         int j1 = j / byte0;
-        Random random = worldObj.setRandomSeed(i1, j1, 0x9e7f70);
+        Random random = new Random((long)i1 * 0x4f9939f508L + (long)j1 * 0x1ef1565bd5L + worldObj.getWorldInfo().getRandomSeed() + (long) 0x9e7f70);
         i1 *= byte0;
         j1 *= byte0;
         i1 += random.nextInt(byte0 - byte1);
diff -ruN src/minecraft/net/minecraft/src/MouseHelper.java newsrc/minecraft/net/minecraft/src/MouseHelper.java
--- src/minecraft/net/minecraft/src/MouseHelper.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/MouseHelper.java	2021-01-01 00:00:00.000000000 +0100
@@ -42,20 +42,20 @@
 
     public void grabMouseCursor()
     {
-        Mouse.setGrabbed(true);
+    	net.tasmod.virtual.VirtualMouse.setGrabbed(true);
         deltaX = 0;
         deltaY = 0;
     }
 
     public void ungrabMouseCursor()
     {
-        Mouse.setCursorPosition(windowComponent.getWidth() / 2, windowComponent.getHeight() / 2);
-        Mouse.setGrabbed(false);
+    	net.tasmod.virtual.VirtualMouse.setCursorPosition(windowComponent.getWidth() / 2, windowComponent.getHeight() / 2);
+    	net.tasmod.virtual.VirtualMouse.setGrabbed(false);
     }
 
     public void mouseXYChange()
     {
-        deltaX = Mouse.getDX();
-        deltaY = Mouse.getDY();
+        deltaX = net.tasmod.virtual.VirtualMouse.getDX();
+        deltaY = net.tasmod.virtual.VirtualMouse.getDY();
     }
 }
diff -ruN src/minecraft/net/minecraft/src/NetClientHandler.java newsrc/minecraft/net/minecraft/src/NetClientHandler.java
--- src/minecraft/net/minecraft/src/NetClientHandler.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/NetClientHandler.java	2021-01-01 00:00:00.000000000 +0100
@@ -64,7 +64,7 @@
         field_35787_k = new HashMap();
         field_35786_c = new ArrayList();
         field_35785_d = 20;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         mc = minecraft;
         Socket socket = new Socket(InetAddress.getByName(s), i);
         netManager = new NetworkManager(socket, "Client", this);
diff -ruN src/minecraft/net/minecraft/src/Particle.java newsrc/minecraft/net/minecraft/src/Particle.java
--- src/minecraft/net/minecraft/src/Particle.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/Particle.java	2021-01-01 00:00:00.000000000 +0100
@@ -12,7 +12,7 @@
 public class Particle
 {
 
-    private static Random rand = new Random();
+    private static Random rand = new net.tasmod.rng.FakeRandom();
     public double posX;
     public double posY;
     public double prevPosX;
diff -ruN src/minecraft/net/minecraft/src/RenderEnderman.java newsrc/minecraft/net/minecraft/src/RenderEnderman.java
--- src/minecraft/net/minecraft/src/RenderEnderman.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/RenderEnderman.java	2021-01-01 00:00:00.000000000 +0100
@@ -20,7 +20,7 @@
     public RenderEnderman()
     {
         super(new ModelEnderman(), 0.5F);
-        rnd = new Random();
+        rnd = new net.tasmod.rng.FakeRandom();
         endermanModel = (ModelEnderman)super.mainModel;
         setRenderPassModel(endermanModel);
     }
diff -ruN src/minecraft/net/minecraft/src/RenderItem.java newsrc/minecraft/net/minecraft/src/RenderItem.java
--- src/minecraft/net/minecraft/src/RenderItem.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/RenderItem.java	2021-01-01 00:00:00.000000000 +0100
@@ -24,7 +24,7 @@
     public RenderItem()
     {
         renderBlocks = new RenderBlocks();
-        random = new Random();
+        random = new net.tasmod.rng.FakeRandom();
         field_27004_a = true;
         field_40268_b = 0.0F;
         shadowSize = 0.15F;
diff -ruN src/minecraft/net/minecraft/src/SoundManager.java newsrc/minecraft/net/minecraft/src/SoundManager.java
--- src/minecraft/net/minecraft/src/SoundManager.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/SoundManager.java	2021-01-01 00:00:00.000000000 +0100
@@ -36,7 +36,7 @@
         soundPoolStreaming = new SoundPool();
         soundPoolMusic = new SoundPool();
         latestSoundID = 0;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         ticksBeforeMusic = rand.nextInt(12000);
     }
 
diff -ruN src/minecraft/net/minecraft/src/SoundPool.java newsrc/minecraft/net/minecraft/src/SoundPool.java
--- src/minecraft/net/minecraft/src/SoundPool.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/SoundPool.java	2021-01-01 00:00:00.000000000 +0100
@@ -23,7 +23,7 @@
 
     public SoundPool()
     {
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         nameToSoundPoolEntriesMapping = new HashMap();
         allSoundPoolEntries = new ArrayList();
         numberOfSoundPoolEntries = 0;
diff -ruN src/minecraft/net/minecraft/src/Teleporter.java newsrc/minecraft/net/minecraft/src/Teleporter.java
--- src/minecraft/net/minecraft/src/Teleporter.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/Teleporter.java	2021-01-01 00:00:00.000000000 +0100
@@ -17,7 +17,7 @@
 
     public Teleporter()
     {
-        random = new Random();
+        random = new net.tasmod.rng.FakeRandom();
     }
 
     public void placeInPortal(World world, Entity entity)
diff -ruN src/minecraft/net/minecraft/src/TileEntityDispenser.java newsrc/minecraft/net/minecraft/src/TileEntityDispenser.java
--- src/minecraft/net/minecraft/src/TileEntityDispenser.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/TileEntityDispenser.java	2021-01-01 00:00:00.000000000 +0100
@@ -20,7 +20,7 @@
     public TileEntityDispenser()
     {
         dispenserContents = new ItemStack[9];
-        dispenserRandom = new Random();
+        dispenserRandom = new net.tasmod.rng.FakeRandom();
     }
 
     public int getSizeInventory()
diff -ruN src/minecraft/net/minecraft/src/TileEntityEnchantmentTable.java newsrc/minecraft/net/minecraft/src/TileEntityEnchantmentTable.java
--- src/minecraft/net/minecraft/src/TileEntityEnchantmentTable.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/TileEntityEnchantmentTable.java	2021-01-01 00:00:00.000000000 +0100
@@ -22,7 +22,7 @@
     public float field_40069_h;
     public float field_40067_p;
     public float field_40066_q;
-    private static Random field_40064_r = new Random();
+    private static Random field_40064_r = new net.tasmod.rng.FakeRandom();
 
     public TileEntityEnchantmentTable()
     {
diff -ruN src/minecraft/net/minecraft/src/World.java newsrc/minecraft/net/minecraft/src/World.java
--- src/minecraft/net/minecraft/src/World.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/World.java	2021-01-01 00:00:00.000000000 +0100
@@ -97,13 +97,13 @@
         weatherEffects = new ArrayList();
         cloudColour = 0xffffffL;
         skylightSubtracted = 0;
-        updateLCG = (new Random()).nextInt();
+        updateLCG = (new net.tasmod.rng.FakeRandom()).nextInt();
         lastLightningBolt = 0;
         lightningFlash = 0;
         editingBlocks = false;
         lockTimestamp = System.currentTimeMillis();
         autosavePeriod = 40;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         isNewWorld = false;
         worldAccesses = new ArrayList();
         collidingBoundingBoxes = new ArrayList();
@@ -143,13 +143,13 @@
         weatherEffects = new ArrayList();
         cloudColour = 0xffffffL;
         skylightSubtracted = 0;
-        updateLCG = (new Random()).nextInt();
+        updateLCG = (new net.tasmod.rng.FakeRandom()).nextInt();
         lastLightningBolt = 0;
         lightningFlash = 0;
         editingBlocks = false;
         lockTimestamp = System.currentTimeMillis();
         autosavePeriod = 40;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         isNewWorld = false;
         worldAccesses = new ArrayList();
         collidingBoundingBoxes = new ArrayList();
@@ -195,13 +195,13 @@
         weatherEffects = new ArrayList();
         cloudColour = 0xffffffL;
         skylightSubtracted = 0;
-        updateLCG = (new Random()).nextInt();
+        updateLCG = (new net.tasmod.rng.FakeRandom()).nextInt();
         lastLightningBolt = 0;
         lightningFlash = 0;
         editingBlocks = false;
         lockTimestamp = System.currentTimeMillis();
         autosavePeriod = 40;
-        rand = new Random();
+        rand = new net.tasmod.rng.FakeRandom();
         isNewWorld = false;
         worldAccesses = new ArrayList();
         collidingBoundingBoxes = new ArrayList();
@@ -2806,7 +2806,7 @@
     public void randomDisplayUpdates(int i, int j, int k)
     {
         byte byte0 = 16;
-        Random random = new Random();
+        Random random = new net.tasmod.rng.FakeRandom();
         for(int l = 0; l < 1000; l++)
         {
             int i1 = (i + rand.nextInt(byte0)) - rand.nextInt(byte0);
@@ -3449,12 +3449,6 @@
         return field_35472_c;
     }
 
-    public Random setRandomSeed(int i, int j, int k)
-    {
-        long l = (long)i * 0x4f9939f508L + (long)j * 0x1ef1565bd5L + getWorldInfo().getRandomSeed() + (long)k;
-        rand.setSeed(l);
-        return rand;
-    }
 
     public boolean updatingLighting()
     {
diff -ruN src/minecraft/net/minecraft/src/WorldGenHellLava.java newsrc/minecraft/net/minecraft/src/WorldGenHellLava.java
--- src/minecraft/net/minecraft/src/WorldGenHellLava.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/WorldGenHellLava.java	2021-01-01 00:00:00.000000000 +0100
@@ -6,6 +6,8 @@
 
 import java.util.Random;
 
+import net.tasmod.rng.FakeRandom;
+
 // Referenced classes of package net.minecraft.src:
 //            WorldGenerator, World, Block
 
@@ -75,7 +77,7 @@
         {
             world.setBlockWithNotify(i, j, k, hellLavaID);
             world.scheduledUpdatesAreImmediate = true;
-            Block.blocksList[hellLavaID].updateTick(world, i, j, k, random);
+            Block.blocksList[hellLavaID].updateTick(world, i, j, k, new FakeRandom()); // updateTick being called with wrong RNG
             world.scheduledUpdatesAreImmediate = false;
         }
         return true;
diff -ruN src/minecraft/net/minecraft/src/WorldGenLiquids.java newsrc/minecraft/net/minecraft/src/WorldGenLiquids.java
--- src/minecraft/net/minecraft/src/WorldGenLiquids.java	2021-01-01 00:00:00.000000000 +0100
+++ newsrc/minecraft/net/minecraft/src/WorldGenLiquids.java	2021-01-01 00:00:00.000000000 +0100
@@ -6,6 +6,8 @@
 
 import java.util.Random;
 
+import net.tasmod.rng.FakeRandom;
+
 // Referenced classes of package net.minecraft.src:
 //            WorldGenerator, World, Block
 
@@ -71,7 +73,7 @@
         {
             world.setBlockWithNotify(i, j, k, liquidBlockId);
             world.scheduledUpdatesAreImmediate = true;
-            Block.blocksList[liquidBlockId].updateTick(world, i, j, k, random);
+            Block.blocksList[liquidBlockId].updateTick(world, i, j, k, new FakeRandom()); // updateTick being called with wrong RNG
             world.scheduledUpdatesAreImmediate = false;
         }
         return true;
